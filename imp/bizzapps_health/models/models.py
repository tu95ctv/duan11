# -*- coding: utf-8 -*-

from odoo import models, fields, api

class AccountInvoice(models.Model):
    _inherit = 'account.invoice'
    is_sale = fields.Boolean()
    dob = fields.Date()
    institution_id = fields.Many2one('medical.health.center')
    labtest_id = fields.Many2one('medical.lab.test')
    patient_id = fields.Many2one('medical.patient')
    prescription_id = fields.Many2one('medical.prescription')
    receiving_id = fields.Many2one('medical.receiving.patient')
    room = fields.Many2one('medical.health.center.ot')
    walkin_id = fields.Many2one('medical.appointment.register.walkin')
    imaging_id = fields.Many2one('medical.imaging')
    department_id = fields.Many2one('medical.health.center.ward')
    sex = fields.Selection([('1','1')])

# class ProductProduct(models.Model):
#     _inherit = 'product.product'
#     is_vaccine = fields.Boolean(related='product_tmpl_id.is_vaccine')
#     is_medicine = fields.Boolean(related='product_tmpl_id.is_medicine')
#     is_medical_supply = fields.Boolean(related='product_tmpl_id.is_medical_supply')
#     is_insurance_plan = fields.Boolean(related='product_tmpl_id.is_insurance_plan')
#     is_bed = fields.Boolean(related='product_tmpl_id.is_bed')

# class ProductTemplate(models.Model):
#     _inherit = 'product.template'
#     is_bed = fields.Boolean()
#     is_insurance_plan = fields.Boolean()
#     is_medical_supply = fields.Boolean()
#     is_medicine = fields.Boolean()
#     is_vaccine = fields.Boolean()

# class ResPartner(models.Model):
#     _inherit = 'res.partner'
#     is_doctor = fields.Boolean()
#     is_institution = fields.Boolean()
#     is_insurance_company = fields.Boolean()
#     is_patient = fields.Boolean()
#     is_person = fields.Boolean()
#     is_pharmacy = fields.Boolean()
 

class ResUsers(models.Model):
    _inherit = 'res.users'
   
    supplier_invoice_count = fields.Integer(related='partner_id.supplier_invoice_count')
    purchase_warn_msg = fields.Text(related='partner_id.purchase_warn_msg')
    purchase_warn = fields.Selection([('1','1')], related='partner_id.purchase_warn')
    purchase_order_count = fields.Integer(related='partner_id.purchase_order_count')
    property_purchase_currency_id = fields.Many2one('res.currency', related='partner_id.property_purchase_currency_id')
#     is_pharmacy = fields.Boolean(related='partner_id.is_pharmacy')
#     is_person = fields.Boolean(related='partner_id.is_person')
#     is_patient = fields.Boolean(related='partner_id.is_patient')
#     is_insurance_company = fields.Boolean(related='partner_id.is_insurance_company')
#     is_institution = fields.Boolean(related='partner_id.is_institution')
#     is_doctor = fields.Boolean(related='partner_id.is_doctor')

class ResCountryDistrict(models.Model):
    _inherit = 'res.country.district'
    code = fields.Char()
    name = fields.Char()
    state_id = fields.Many2one('res.country.state')

class ResCountryWards(models.Model):
    _inherit = 'res.country.wards'
    code = fields.Char()
    name = fields.Char()
    district_id = fields.Many2one('res.country.district')

class StockWarehouse(models.Model):
    _inherit = 'stock.warehouse'
    health_center_id = fields.Many2one('medical.health.center')

class ExaminationReportDetailIcsc(models.Model):
    _name = 'examination.report.detail.icsc'
    citizen_id = fields.Char()
    date = fields.Date()
    dob = fields.Date()
    report_id = fields.Many2one('examination.report.icsc')
    walkin_id = fields.Many2one('medical.appointment.register.walkin')
    doctor = fields.Many2one('medical.physician')
    patient = fields.Many2one('medical.patient')
    sex = fields.Selection([('1','1')])

class ExaminationReportIcsc(models.Model):
    _name = 'examination.report.icsc'
    name = fields.Char()
    date = fields.Date()
    date_to = fields.Date()
    date_from = fields.Date()
    user_id = fields.Many2one('res.users')
    department = fields.Many2one('medical.health.center.ward')
    institution = fields.Many2one('medical.health.center')
    room_id = fields.Many2one('medical.health.center.ot')
    detail_ids = fields.One2many('examination.report.detail.icsc', 'report_id')
    type = fields.Selection([('1','1')])

class InventortyReportPopup(models.Model):
    _name = 'inventorty.report.popup'
    date_from = fields.Date()
    date_to = fields.Date()
    categ_ids = fields.Many2many('product.category', relation='inventory_report_popup_product_category_rel')
    location_ids = fields.Many2many('stock.location', relation='inventory_report_popup_location_rel')
    warehouse_ids = fields.Many2many('stock.warehouse', relation='inventory_report_popup_warehouse_rel')
    company_id = fields.Many2one('res.company')

class MakeWarehouse(models.Model):
    _name = 'make.warehouse'
    code = fields.Char()
    name = fields.Char()
    partner_id = fields.Many2one('res.partner')

class MedicalAppointment(models.Model):
    _name = 'medical.appointment'
    last_pap_smear_chk = fields.Boolean()
    ihd_chk = fields.Boolean()
    hypertension_chk = fields.Boolean()
    bleeding_pv_chk = fields.Boolean()
    aspirin_chk = fields.Boolean()
    cold_chk = fields.Boolean()
    surgery_chk = fields.Boolean()
    nsaids_chk = fields.Boolean()
    laxative_chk = fields.Boolean()
    hbv_infection_chk = fields.Boolean()
    dm_chk = fields.Boolean()
    menorrhagia_chk = fields.Boolean()
    lmp_chk = fields.Boolean()
    dysmenorrhoea_chk = fields.Boolean()
    name = fields.Char()
    lmp_dt = fields.Date()
    appointment_date = fields.Datetime()
    appointment_end = fields.Datetime()
    duration = fields.Integer()
    patient = fields.Many2one('medical.patient')
    doctor = fields.Many2one('medical.physician')
    institution = fields.Many2one('medical.health.center')
    evaluation_ids = fields.One2many('medical.evaluation', 'appointment')
    urgency_level = fields.Selection([('1','1')])
    state = fields.Selection([('1','1')])
    patient_status = fields.Selection([('1','1')])
    hypertension_remarks = fields.Text()
    nsaids_remarks = fields.Text()
    others_drugs = fields.Text()
    others_past_illness = fields.Text()
    cold_remarks = fields.Text()
    surgery_remarks = fields.Text()
    bleeding_pv_remarks = fields.Text()
    aspirin_remarks = fields.Text()
    comments = fields.Text()
    ihd_remarks = fields.Text()
    hbv_infection_remarks = fields.Text()
    last_pap_smear_remarks = fields.Text()
    laxative_remarks = fields.Text()
    dm_remarks = fields.Text()
    menorrhagia_remarks = fields.Text()
    dysmenorrhoea_remarks = fields.Text()

class MedicalAppointmentRegisterWalkin(models.Model):
    _name = 'medical.appointment.register.walkin'
    hbv_infection_chk = fields.Boolean()
    surgery_chk = fields.Boolean()
    bleeding_pv_chk = fields.Boolean()
    aspirin_chk = fields.Boolean()
    nsaids_chk = fields.Boolean()
    cold_chk = fields.Boolean()
    menorrhagia_chk = fields.Boolean()
    lmp_chk = fields.Boolean()
    laxative_chk = fields.Boolean()
    last_pap_smear_chk = fields.Boolean()
    dm_chk = fields.Boolean()
    is_walkin = fields.Boolean()
    ihd_chk = fields.Boolean()
    hypertension_chk = fields.Boolean()
    dysmenorrhoea_chk = fields.Boolean()
    reason_check = fields.Char()
    name = fields.Char()
    date_re_exam = fields.Date()
    lmp_dt = fields.Date()
    dob = fields.Date()
    date = fields.Datetime()
    symptoms_ids = fields.Many2many('medical.symptoms', relation='medical_appointment_register_walkin_icsc_symptoms_rel')
    symptom_ids = fields.Many2many('medical.symptoms', relation='medical_appointment_register_walkin_symptoms')
    diagnosis_ids = fields.Many2many('medical.pathology', relation='medical_register_walkin_icsc_pathology_rel')
    patient = fields.Many2one('medical.patient')
    receiving_id = fields.Many2one('medical.receiving.patient')
    room_id = fields.Many2one('medical.health.center.ot')
    stage_id = fields.Many2one('medical.registration.type')
    doctor = fields.Many2one('medical.physician')
    institution = fields.Many2one('medical.health.center')
    wards_id = fields.Many2one('medical.health.center.ward')
    insurance_id = fields.Many2one('medical.insurance')
    vaccine_ids = fields.One2many('medical.vaccines', 'walkin')
    evaluation_ids = fields.One2many('medical.evaluation', 'walkin')
    inpatient_ids = fields.One2many('medical.inpatient', 'walkin')
    lab_test_ids = fields.One2many('medical.lab.test', 'walkin')
    prescription_ids = fields.One2many('medical.physicians.prescription', 'walkin')
    imaing_ids = fields.One2many('medical.imaging', 'walkin_id')
    state = fields.Selection([('1','1')])
    rh = fields.Selection([('1','1')])
    marital_status = fields.Selection([('1','1')])
    blood_type = fields.Selection([('1','1')])
    sex = fields.Selection([('1','1')])
    dysmenorrhoea_remarks = fields.Text()
    hbv_infection_remarks = fields.Text()
    hypertension_remarks = fields.Text()
    ihd_remarks = fields.Text()
    dm_remarks = fields.Text()
    last_pap_smear_remarks = fields.Text()
    laxative_remarks = fields.Text()
    cold_remarks = fields.Text()
    menorrhagia_remarks = fields.Text()
    nsaids_remarks = fields.Text()
    others_drugs = fields.Text()
    others_past_illness = fields.Text()
    bleeding_pv_remarks = fields.Text()
    aspirin_remarks = fields.Text()
    surgery_remarks = fields.Text()
    comments = fields.Text()
    symptoms = fields.Text()

class MedicalDegrees(models.Model):
    _name = 'medical.degrees'
    full_name = fields.Char()
    name = fields.Char()
    physician_ids = fields.Many2many('medical.physician', relation='medical_degrees_medical_physician_rel')

class MedicalDosage(models.Model):
    _name = 'medical.dosage'
    code = fields.Char()
    abbreviation = fields.Char()
    name = fields.Char()

class MedicalDoseUnit(models.Model):
    _name = 'medical.dose.unit'
    desc = fields.Char()
    name = fields.Char()

class MedicalDrugForm(models.Model):
    _name = 'medical.drug.form'
    code = fields.Char()
    name = fields.Char()

class MedicalDrugRoute(models.Model):
    _name = 'medical.drug.route'
    code = fields.Char()
    name = fields.Char()

class MedicalEthnicity(models.Model):
    _name = 'medical.ethnicity'
    name = fields.Char()

class MedicalEvaluation(models.Model):
    _name = 'medical.evaluation'
    xerosis = fields.Boolean()
    acropachy = fields.Boolean()
    alopecia = fields.Boolean()
    symptom_hemoptysis = fields.Boolean()
    symptom_hoarseness = fields.Boolean()
    symptom_lumbar_pain = fields.Boolean()
    object_recognition = fields.Boolean()
    symptom_menorrhagia = fields.Boolean()
    symptom_insomnia = fields.Boolean()
    symptom_orthopnea = fields.Boolean()
    symptom_melena = fields.Boolean()
    symptom_metrorrhagia = fields.Boolean()
    symptom_mood_swings = fields.Boolean()
    symptom_paralysis = fields.Boolean()
    symptom_pollakiuria = fields.Boolean()
    symptom_myalgia = fields.Boolean()
    symptom_nausea = fields.Boolean()
    symptom_nocturia = fields.Boolean()
    symptom_odynophagia = fields.Boolean()
    symptom_orthostatic_hypotension = fields.Boolean()
    symptom_otalgia = fields.Boolean()
    symptom_pruritus = fields.Boolean()
    symptom_pain = fields.Boolean()
    symptom_paresthesia = fields.Boolean()
    symptom_pelvic_pain = fields.Boolean()
    symptom_photophobia = fields.Boolean()
    symptom_polydipsia = fields.Boolean()
    symptom_polyphagia = fields.Boolean()
    symptom_urethral_discharge = fields.Boolean()
    symptom_polyuria = fields.Boolean()
    symptom_proctorrhagia = fields.Boolean()
    symptom_rectal_tenesmus = fields.Boolean()
    symptom_rinorrhea = fields.Boolean()
    symptom_sexual_dysfunction = fields.Boolean()
    symptom_sore_throat = fields.Boolean()
    symptom_stress = fields.Boolean()
    symptom_syncope = fields.Boolean()
    symptom_thoracic_pain = fields.Boolean()
    symptom_tinnitus = fields.Boolean()
    symptom_vaginal_discharge = fields.Boolean()
    symptom_vertigo = fields.Boolean()
    symptom_vesical_tenesmus = fields.Boolean()
    symptom_vomiting = fields.Boolean()
    symptom_weight_change = fields.Boolean()
    symptom_xerostomia = fields.Boolean()
    vocabulary = fields.Boolean()
    violent = fields.Boolean()
    abstraction = fields.Boolean()
    arritmia = fields.Boolean()
    ascites = fields.Boolean()
    breast_asymmetry = fields.Boolean()
    breast_lump = fields.Boolean()
    bronchophony = fields.Boolean()
    calculation_ability = fields.Boolean()
    cough = fields.Boolean()
    cyanosis = fields.Boolean()
    decreased_fremitus = fields.Boolean()
    dehydration = fields.Boolean()
    edema = fields.Boolean()
    erithema = fields.Boolean()
    goiter = fields.Boolean()
    gynecomastia = fields.Boolean()
    heart_extra_sounds = fields.Boolean()
    heart_murmurs = fields.Boolean()
    hematoma = fields.Boolean()
    hypertonia = fields.Boolean()
    hypotonia = fields.Boolean()
    increased_fremitus = fields.Boolean()
    jaundice = fields.Boolean()
    judgment = fields.Boolean()
    jugular_engorgement = fields.Boolean()
    knowledge_current_events = fields.Boolean()
    lung_adventitious_sounds = fields.Boolean()
    lynphadenitis = fields.Boolean()
    malnutrition = fields.Boolean()
    masses = fields.Boolean()
    memory = fields.Boolean()
    miosis = fields.Boolean()
    mydriasis = fields.Boolean()
    nipple_discharge = fields.Boolean()
    nipple_inversion = fields.Boolean()
    nystagmus = fields.Boolean()
    orientation = fields.Boolean()
    palpebral_ptosis = fields.Boolean()
    peau_dorange = fields.Boolean()
    petechiae = fields.Boolean()
    praxis = fields.Boolean()
    pressure_ulcers = fields.Boolean()
    symptom_abdominal_distension = fields.Boolean()
    symptom_abdominal_pain = fields.Boolean()
    symptom_amenorrhea = fields.Boolean()
    symptom_blurry_vision = fields.Boolean()
    symptom_amnesia = fields.Boolean()
    symptom_anorexia = fields.Boolean()
    symptom_arthralgia = fields.Boolean()
    symptom_astenia = fields.Boolean()
    symptom_cervical_pain = fields.Boolean()
    symptom_chest_pain = fields.Boolean()
    symptom_chest_pain_excercise = fields.Boolean()
    symptom_diarrhea = fields.Boolean()
    symptom_dizziness = fields.Boolean()
    symptom_constipation = fields.Boolean()
    symptom_diplopia = fields.Boolean()
    symptom_disturb_sleep = fields.Boolean()
    symptom_dysmenorrhea = fields.Boolean()
    symptom_dysphagia = fields.Boolean()
    symptom_dyspnea = fields.Boolean()
    symptom_dysuria = fields.Boolean()
    symptom_ear_discharge = fields.Boolean()
    symptom_epistaxis = fields.Boolean()
    symptom_eye_glasses = fields.Boolean()
    symptom_gingival_bleeding = fields.Boolean()
    symptom_headache = fields.Boolean()
    symptom_hematemesis = fields.Boolean()
    chief_complaint = fields.Char()
    name = fields.Char()
    evaluation_end_date = fields.Datetime()
    evaluation_start_date = fields.Datetime()
    head_circumference = fields.Float()
    hba1c = fields.Float()
    temperature = fields.Float()
    glycemia = fields.Float()
    breath_rhythm = fields.Float()
    bmi = fields.Float()
    abdominal_circ = fields.Float()
    pulse = fields.Float()
    weight = fields.Float()
    height = fields.Float()
    symptom_pain_intensity = fields.Integer()
    osat = fields.Integer()
    bpm = fields.Integer()
    ldl = fields.Integer()
    loc = fields.Integer()
    loc_eyes = fields.Integer()
    loc_motor = fields.Integer()
    cholesterol_total = fields.Integer()
    loc_verbal = fields.Integer()
    diastolic = fields.Integer()
    systolic = fields.Integer()
    tag = fields.Integer()
    hdl = fields.Integer()
    respiratory_rate = fields.Integer()
    drug_allergy = fields.Many2many('medical.medicines', relation='medical_evaluation_medicines_rel')
    walkin = fields.Many2one('medical.appointment.register.walkin')
    derived_to = fields.Many2one('medical.physician')
    derived_from = fields.Many2one('medical.physician')
    patient = fields.Many2one('medical.patient')
    doctor = fields.Many2one('medical.physician')
    receiving_id = fields.Many2one('medical.receiving.patient')
    appointment = fields.Many2one('medical.appointment')
    indication = fields.Many2one('medical.pathology')
    evaluation_type = fields.Selection([('1','1')])
    mood = fields.Selection([('1','1')])
    note = fields.Text()
    particularity = fields.Text()
    notes = fields.Text()
    info_diagnosis = fields.Text()
    directions = fields.Text()
    notes_complaint = fields.Text()

class MedicalGenetics(models.Model):
    _name = 'medical.genetics'
    long_name = fields.Char()
    gene_id = fields.Char()
    chromosome = fields.Char()
    location = fields.Char()
    name = fields.Char()
    dominance = fields.Selection([('1','1')])
    info = fields.Text()

class MedicalGyneco(models.Model):
    _name = 'medical.gyneco'
    placenta_retained = fields.Boolean()
    forceps = fields.Boolean()
    placenta_incomplete = fields.Boolean()
    died_at_delivery = fields.Boolean()
    died_at_the_hospital = fields.Boolean()
    died_being_transferred = fields.Boolean()
    abortion = fields.Boolean()
    episiotomy = fields.Boolean()
    vaginal_tearing = fields.Boolean()
    name = fields.Char()
    abortion_reason = fields.Char()
    admission_date = fields.Datetime()
    dismissed = fields.Datetime()
    gestational_weeks = fields.Integer()
    gravida_number = fields.Integer()
    gestational_days = fields.Integer()
    prenatal_evaluations = fields.Integer()
    patient = fields.Many2one('medical.patient')
    perinatal_ids = fields.One2many('medical.perinatal.monitor', 'gyneco_id')
    puerperium_ids = fields.One2many('medical.puerperium.monitor', 'gyneco_id')
    fetus_presentation = fields.Selection([('1','1')])
    labor_mode = fields.Selection([('1','1')])
    notes = fields.Text()

class MedicalHealthCenter(models.Model):
    _name = 'medical.health.center'
    is_headquarter = fields.Boolean()
    full_address = fields.Char()
    room_count = fields.Integer()
    pharmacy_count = fields.Integer()
    department_count = fields.Integer()
    building_count = fields.Integer()
    partner_id = fields.Many2one('res.partner')
    warehouse_id = fields.Many2one('stock.warehouse')
    parent_id = fields.Many2one('medical.health.center')
    user_ids = fields.One2many('res.users', 'institution')
    child_ids = fields.One2many('medical.health.center', 'parent_id')
    warehouse_ids = fields.One2many('stock.warehouse', 'health_center_id')
    health_center_type = fields.Selection([('1','1')])
    info = fields.Text()
    zip = fields.Char(related='partner_id.zip')
    website = fields.Char(related='partner_id.website')
    wards_id = fields.Many2one('res.country.wards', related='partner_id.wards_id')
    vat = fields.Char(related='partner_id.vat')
    user_id = fields.Many2one('res.users', related='partner_id.user_id')
    unreconciled_aml_ids = fields.One2many('account.move.line', related='partner_id.unreconciled_aml_ids')
    tz_offset = fields.Char(related='partner_id.tz_offset')
    tz = fields.Selection([('1','1')], related='partner_id.tz')
    type = fields.Selection([('1','1')], related='partner_id.type')
    trust = fields.Selection([('1','1')], related='partner_id.trust')
    total_invoiced = fields.Monetary(related='partner_id.total_invoiced')
    title = fields.Many2one('res.partner.title', related='partner_id.title')
    team_id = fields.Many2one('crm.team', related='partner_id.team_id')
    supplier_invoice_count = fields.Integer(related='partner_id.supplier_invoice_count')
    supplier = fields.Boolean(related='partner_id.supplier')
    street2 = fields.Char(related='partner_id.street2')
    street = fields.Char(related='partner_id.street')
    state_id = fields.Many2one('res.country.state', related='partner_id.state_id')
    signup_valid = fields.Boolean(related='partner_id.signup_valid')
    signup_url = fields.Char(related='partner_id.signup_url')
    signup_type = fields.Char(related='partner_id.signup_type')
    signup_token = fields.Char(related='partner_id.signup_token')
    signup_expiration = fields.Datetime(related='partner_id.signup_expiration')
    self = fields.Many2one('res.partner', related='partner_id.self')
    sale_warn_msg = fields.Text(related='partner_id.sale_warn_msg')
    sale_warn = fields.Selection([('1','1')], related='partner_id.sale_warn')
    sale_order_ids = fields.One2many('sale.order', related='partner_id.sale_order_ids')
    sale_order_count = fields.Integer(related='partner_id.sale_order_count')
    ref_company_ids = fields.One2many('res.company', related='partner_id.ref_company_ids')
    ref = fields.Char(related='partner_id.ref')
    purchase_warn_msg = fields.Text(related='partner_id.purchase_warn_msg')
    purchase_warn = fields.Selection([('1','1')], related='partner_id.purchase_warn')
    purchase_order_count = fields.Integer(related='partner_id.purchase_order_count')
    property_supplier_payment_term_id = fields.Many2one('account.payment.term', related='partner_id.property_supplier_payment_term_id')
    property_stock_supplier = fields.Many2one('stock.location', related='partner_id.property_stock_supplier')
    property_stock_customer = fields.Many2one('stock.location', related='partner_id.property_stock_customer')
    property_purchase_currency_id = fields.Many2one('res.currency', related='partner_id.property_purchase_currency_id')
    property_product_pricelist = fields.Many2one('product.pricelist', related='partner_id.property_product_pricelist')
    property_payment_term_id = fields.Many2one('account.payment.term', related='partner_id.property_payment_term_id')
    property_account_receivable_id = fields.Many2one('account.account', related='partner_id.property_account_receivable_id')
    property_account_position_id = fields.Many2one('account.fiscal.position', related='partner_id.property_account_position_id')
    property_account_payable_id = fields.Many2one('account.account', related='partner_id.property_account_payable_id')
    picking_warn_msg = fields.Text(related='partner_id.picking_warn_msg')
    picking_warn = fields.Selection([('1','1')], related='partner_id.picking_warn')
    phone = fields.Char(related='partner_id.phone')
    payment_token_ids = fields.One2many('payment.token', related='partner_id.payment_token_ids')
    payment_token_count = fields.Integer(related='partner_id.payment_token_count')
    payment_next_action_date = fields.Date(related='partner_id.payment_next_action_date')
    payment_next_action = fields.Text(related='partner_id.payment_next_action')
    partner_share = fields.Boolean(related='partner_id.partner_share')
    parent_name = fields.Char(related='partner_id.parent_name')
    opt_out = fields.Boolean(related='partner_id.opt_out')
    notify_email = fields.Selection([('1','1')], related='partner_id.notify_email')
    name = fields.Char(related='partner_id.name')
    mobile = fields.Char(related='partner_id.mobile')
    message_unread_counter = fields.Integer(related='partner_id.message_unread_counter')
    message_unread = fields.Boolean(related='partner_id.message_unread')
    message_partner_ids = fields.Many2many('res.partner', related='partner_id.message_partner_ids')
    message_needaction_counter = fields.Integer(related='partner_id.message_needaction_counter')
    message_needaction = fields.Boolean(related='partner_id.message_needaction')
    message_last_post = fields.Datetime(related='partner_id.message_last_post')
    message_is_follower = fields.Boolean(related='partner_id.message_is_follower')
    message_bounce = fields.Integer(related='partner_id.message_bounce')
    last_time_entries_checked = fields.Datetime(related='partner_id.last_time_entries_checked')
    lang = fields.Selection([('1','1')], related='partner_id.lang')
    journal_item_count = fields.Integer(related='partner_id.journal_item_count')
    issued_total = fields.Monetary(related='partner_id.issued_total')
    is_pharmacy = fields.Boolean(related='partner_id.is_pharmacy')
    is_person = fields.Boolean(related='partner_id.is_person')
    is_patient = fields.Boolean(related='partner_id.is_patient')
    is_insurance_company = fields.Boolean(related='partner_id.is_insurance_company')
    is_institution = fields.Boolean(related='partner_id.is_institution')
    is_doctor = fields.Boolean(related='partner_id.is_doctor')
    is_company = fields.Boolean(related='partner_id.is_company')
    invoice_warn_msg = fields.Text(related='partner_id.invoice_warn_msg')
    invoice_warn = fields.Selection([('1','1')], related='partner_id.invoice_warn')
    invoice_ids = fields.One2many('account.invoice', related='partner_id.invoice_ids')
    image_small = fields.Binary(related='partner_id.image_small')
    image_medium = fields.Binary(related='partner_id.image_medium')
    image = fields.Binary(related='partner_id.image')
    im_status = fields.Char(related='partner_id.im_status')
    identify_card = fields.Char(related='partner_id.identify_card')
    has_unreconciled_entries = fields.Boolean(related='partner_id.has_unreconciled_entries')
    function = fields.Char(related='partner_id.function')
    fax = fields.Char(related='partner_id.fax')
    estbday = fields.Date(related='partner_id.estbday')
    employee = fields.Boolean(related='partner_id.employee')
    email_formatted = fields.Char(related='partner_id.email_formatted')
    email = fields.Char(related='partner_id.email')
    district_id = fields.Many2one('res.country.district', related='partner_id.district_id')
    debit_limit = fields.Monetary(related='partner_id.debit_limit')
    debit = fields.Monetary(related='partner_id.debit')
    date = fields.Date(related='partner_id.date')
    customer_code = fields.Char(related='partner_id.customer_code')
    customer = fields.Boolean(related='partner_id.customer')
    currency_id = fields.Many2one('res.currency', related='partner_id.currency_id')
    credit_limit = fields.Float(related='partner_id.credit_limit')
    credit = fields.Monetary(related='partner_id.credit')
    country_id = fields.Many2one('res.country', related='partner_id.country_id')
    contracts_count = fields.Integer(related='partner_id.contracts_count')
    contract_ids = fields.One2many('account.analytic.account', related='partner_id.contract_ids')
    contact_address = fields.Char(related='partner_id.contact_address')
    company_type = fields.Selection([('1','1')], related='partner_id.company_type')
    company_name = fields.Char(related='partner_id.company_name')
    company_id = fields.Many2one('res.company', related='partner_id.company_id')
    commercial_partner_id = fields.Many2one('res.partner', related='partner_id.commercial_partner_id')
    commercial_company_name = fields.Char(related='partner_id.commercial_company_name')
    comment = fields.Text(related='partner_id.comment')
    color = fields.Integer(related='partner_id.color')
    city = fields.Char(related='partner_id.city')
    channel_ids = fields.Many2many('mail.channel', related='partner_id.channel_ids')
    category_id = fields.Many2many('res.partner.category', related='partner_id.category_id')
    birthday = fields.Date(related='partner_id.birthday')
    barcode = fields.Char(related='partner_id.barcode')
    bank_ids = fields.One2many('res.partner.bank', related='partner_id.bank_ids')
    bank_account_count = fields.Integer(related='partner_id.bank_account_count')
    active = fields.Boolean(related='partner_id.active')

class MedicalHealthCenterBeds(models.Model):
    _name = 'medical.health.center.beds'
    telephone_number = fields.Char()
    product_id = fields.Many2one('product.product')
    building = fields.Many2one('medical.health.center.building')
    institution = fields.Many2one('medical.health.center')
    ward = fields.Many2one('medical.health.center.ward')
    state = fields.Selection([('1','1')])
    bed_type = fields.Selection([('1','1')])
    change_bed_status = fields.Selection([('1','1')])
    info = fields.Text()
    weight = fields.Float(related='product_id.weight')
    warranty = fields.Float(related='product_id.warranty')
    warehouse_id = fields.Many2one('stock.warehouse', related='product_id.warehouse_id')
    volume = fields.Float(related='product_id.volume')
    virtual_available = fields.Float(related='product_id.virtual_available')
    valuation = fields.Char(related='product_id.valuation')
    uom_po_id = fields.Many2one('product.uom', related='product_id.uom_po_id')
    uom_id = fields.Many2one('product.uom', related='product_id.uom_id')
    type = fields.Selection([('1','1')], related='product_id.type')
    tracking = fields.Selection([('1','1')], related='product_id.tracking')
    track_service = fields.Selection([('1','1')], related='product_id.track_service')
    taxes_id = fields.Many2many('account.tax', related='product_id.taxes_id')
    supplier_taxes_id = fields.Many2many('account.tax', related='product_id.supplier_taxes_id')
    stock_quant_ids = fields.One2many('stock.quant', related='product_id.stock_quant_ids')
    stock_move_ids = fields.One2many('stock.move', related='product_id.stock_move_ids')
    standard_price = fields.Float(related='product_id.standard_price')
    sequence = fields.Integer(related='product_id.sequence')
    seller_ids = fields.One2many('product.supplierinfo', related='product_id.seller_ids')
    sales_count = fields.Integer(related='product_id.sales_count')
    sale_ok = fields.Boolean(related='product_id.sale_ok')
    sale_line_warn_msg = fields.Text(related='product_id.sale_line_warn_msg')
    sale_line_warn = fields.Selection([('1','1')], related='product_id.sale_line_warn')
    sale_delay = fields.Float(related='product_id.sale_delay')
    route_ids = fields.Many2many('stock.location.route', related='product_id.route_ids')
    route_from_categ_ids = fields.Many2many('stock.location.route', related='product_id.route_from_categ_ids')
    reordering_min_qty = fields.Float(related='product_id.reordering_min_qty')
    reordering_max_qty = fields.Float(related='product_id.reordering_max_qty')
    rental = fields.Boolean(related='product_id.rental')
    reception_count = fields.Integer(related='product_id.reception_count')
    qty_available = fields.Float(related='product_id.qty_available')
    purchase_ok = fields.Boolean(related='product_id.purchase_ok')
    purchase_method = fields.Selection([('1','1')], related='product_id.purchase_method')
    purchase_line_warn_msg = fields.Text(related='product_id.purchase_line_warn_msg')
    purchase_line_warn = fields.Selection([('1','1')], related='product_id.purchase_line_warn')
    purchase_count = fields.Integer(related='product_id.purchase_count')
    property_valuation = fields.Selection([('1','1')], related='product_id.property_valuation')
    property_stock_production = fields.Many2one('stock.location', related='product_id.property_stock_production')
    property_stock_procurement = fields.Many2one('stock.location', related='product_id.property_stock_procurement')
    property_stock_inventory = fields.Many2one('stock.location', related='product_id.property_stock_inventory')
    property_stock_account_output = fields.Many2one('account.account', related='product_id.property_stock_account_output')
    property_stock_account_input = fields.Many2one('account.account', related='product_id.property_stock_account_input')
    property_cost_method = fields.Selection([('1','1')], related='product_id.property_cost_method')
    property_account_income_id = fields.Many2one('account.account', related='product_id.property_account_income_id')
    property_account_expense_id = fields.Many2one('account.account', related='product_id.property_account_expense_id')
    property_account_creditor_price_difference = fields.Many2one('account.account', related='product_id.property_account_creditor_price_difference')
    product_variant_ids = fields.One2many('product.product', related='product_id.product_variant_ids')
    product_variant_id = fields.Many2one('product.product', related='product_id.product_variant_id')
    product_variant_count = fields.Integer(related='product_id.product_variant_count')
    product_tmpl_id = fields.Many2one('product.template', related='product_id.product_tmpl_id')
    pricelist_item_ids = fields.Many2many('product.pricelist.item', related='product_id.pricelist_item_ids')
    pricelist_id = fields.Many2one('product.pricelist', related='product_id.pricelist_id')
    price_extra = fields.Float(related='product_id.price_extra')
    price = fields.Float(related='product_id.price')
    partner_ref = fields.Char(related='product_id.partner_ref')
    packaging_ids = fields.One2many('product.packaging', related='product_id.packaging_ids')
    outgoing_qty = fields.Float(related='product_id.outgoing_qty')
    orderpoint_ids = fields.One2many('stock.warehouse.orderpoint', related='product_id.orderpoint_ids')
    nbr_reordering_rules = fields.Integer(related='product_id.nbr_reordering_rules')
    name = fields.Char(related='product_id.name')
    message_unread_counter = fields.Integer(related='product_id.message_unread_counter')
    message_unread = fields.Boolean(related='product_id.message_unread')
    message_partner_ids = fields.Many2many('res.partner', related='product_id.message_partner_ids')
    message_needaction_counter = fields.Integer(related='product_id.message_needaction_counter')
    message_needaction = fields.Boolean(related='product_id.message_needaction')
    message_last_post = fields.Datetime(related='product_id.message_last_post')
    message_is_follower = fields.Boolean(related='product_id.message_is_follower')
    lst_price = fields.Float(related='product_id.lst_price')
    location_id = fields.Many2one('stock.location', related='product_id.location_id')
    list_price = fields.Float(related='product_id.list_price')
    item_ids = fields.One2many('product.pricelist.item', related='product_id.item_ids')
    is_vaccine = fields.Boolean(related='product_id.is_vaccine')
    is_medicine = fields.Boolean(related='product_id.is_medicine')
    is_medical_supply = fields.Boolean(related='product_id.is_medical_supply')
    is_insurance_plan = fields.Boolean(related='product_id.is_insurance_plan')
    is_bed = fields.Boolean(related='product_id.is_bed')
    invoice_policy = fields.Selection([('1','1')], related='product_id.invoice_policy')
    incoming_qty = fields.Float(related='product_id.incoming_qty')
    image_variant = fields.Binary(related='product_id.image_variant')
    image_small = fields.Binary(related='product_id.image_small')
    image_medium = fields.Binary(related='product_id.image_medium')
    image = fields.Binary(related='product_id.image')
    expense_policy = fields.Selection([('1','1')], related='product_id.expense_policy')
    description_sale = fields.Text(related='product_id.description_sale')
    description_purchase = fields.Text(related='product_id.description_purchase')
    description_picking = fields.Text(related='product_id.description_picking')
    description = fields.Text(related='product_id.description')
    delivery_count = fields.Integer(related='product_id.delivery_count')
    deferred_revenue_category_id = fields.Many2one('account.asset.category', related='product_id.deferred_revenue_category_id')
    default_code = fields.Char(related='product_id.default_code')
    currency_id = fields.Many2one('res.currency', related='product_id.currency_id')
    cost_method = fields.Char(related='product_id.cost_method')
    company_id = fields.Many2one('res.company', related='product_id.company_id')
    color = fields.Integer(related='product_id.color')
    code = fields.Char(related='product_id.code')
    categ_id = fields.Many2one('product.category', related='product_id.categ_id')
    barcode = fields.Char(related='product_id.barcode')
    attribute_value_ids = fields.Many2many('product.attribute.value', related='product_id.attribute_value_ids')
    attribute_line_ids = fields.One2many('product.attribute.line', related='product_id.attribute_line_ids')
    asset_category_id = fields.Many2one('account.asset.category', related='product_id.asset_category_id')
    active = fields.Boolean(related='product_id.active')

class MedicalHealthCenterBuilding(models.Model):
    _name = 'medical.health.center.building'
    name = fields.Char()
    code = fields.Char()
    bed_count = fields.Integer()
    ot_count = fields.Integer()
    ward_count = fields.Integer()
    institution = fields.Many2one('medical.health.center')
    info = fields.Text()

class MedicalHealthCenterOt(models.Model):
    _name = 'medical.health.center.ot'
    name = fields.Char()
    department = fields.Many2one('medical.health.center.ward')
    building = fields.Many2one('medical.health.center.building')
    location_id = fields.Many2one('stock.location')
    institution = fields.Many2one('medical.health.center')
    state = fields.Selection([('1','1')])
    info = fields.Text()

class MedicalHealthCenterPharmacy(models.Model):
    _name = 'medical.health.center.pharmacy'
    is_in_branch = fields.Boolean()
    pres_count = fields.Integer()
    partner_id = fields.Many2one('res.partner')
    institution = fields.Many2one('medical.health.center')
    location_id = fields.Many2one('stock.location')
    pharmacist_ids = fields.One2many('medical.pharmacy.pharmacist', 'pharmacy_id')
    pharmacy_lines = fields.One2many('medical.health.center.pharmacy.line', 'pharmacy_id')
    info = fields.Text()
    zip = fields.Char(related='partner_id.zip')
    website = fields.Char(related='partner_id.website')
    wards_id = fields.Many2one('res.country.wards', related='partner_id.wards_id')
    vat = fields.Char(related='partner_id.vat')
    user_ids = fields.One2many('res.users', related='partner_id.user_ids')
    user_id = fields.Many2one('res.users', related='partner_id.user_id')
    unreconciled_aml_ids = fields.One2many('account.move.line', related='partner_id.unreconciled_aml_ids')
    tz_offset = fields.Char(related='partner_id.tz_offset')
    tz = fields.Selection([('1','1')], related='partner_id.tz')
    type = fields.Selection([('1','1')], related='partner_id.type')
    trust = fields.Selection([('1','1')], related='partner_id.trust')
    total_invoiced = fields.Monetary(related='partner_id.total_invoiced')
    title = fields.Many2one('res.partner.title', related='partner_id.title')
    team_id = fields.Many2one('crm.team', related='partner_id.team_id')
    supplier_invoice_count = fields.Integer(related='partner_id.supplier_invoice_count')
    supplier = fields.Boolean(related='partner_id.supplier')
    street2 = fields.Char(related='partner_id.street2')
    street = fields.Char(related='partner_id.street')
    state_id = fields.Many2one('res.country.state', related='partner_id.state_id')
    signup_valid = fields.Boolean(related='partner_id.signup_valid')
    signup_url = fields.Char(related='partner_id.signup_url')
    signup_type = fields.Char(related='partner_id.signup_type')
    signup_token = fields.Char(related='partner_id.signup_token')
    signup_expiration = fields.Datetime(related='partner_id.signup_expiration')
    self = fields.Many2one('res.partner', related='partner_id.self')
    sale_warn_msg = fields.Text(related='partner_id.sale_warn_msg')
    sale_warn = fields.Selection([('1','1')], related='partner_id.sale_warn')
    sale_order_ids = fields.One2many('sale.order', related='partner_id.sale_order_ids')
    sale_order_count = fields.Integer(related='partner_id.sale_order_count')
    ref_company_ids = fields.One2many('res.company', related='partner_id.ref_company_ids')
    ref = fields.Char(related='partner_id.ref')
    purchase_warn_msg = fields.Text(related='partner_id.purchase_warn_msg')
    purchase_warn = fields.Selection([('1','1')], related='partner_id.purchase_warn')
    purchase_order_count = fields.Integer(related='partner_id.purchase_order_count')
    property_supplier_payment_term_id = fields.Many2one('account.payment.term', related='partner_id.property_supplier_payment_term_id')
    property_stock_supplier = fields.Many2one('stock.location', related='partner_id.property_stock_supplier')
    property_stock_customer = fields.Many2one('stock.location', related='partner_id.property_stock_customer')
    property_purchase_currency_id = fields.Many2one('res.currency', related='partner_id.property_purchase_currency_id')
    property_product_pricelist = fields.Many2one('product.pricelist', related='partner_id.property_product_pricelist')
    property_payment_term_id = fields.Many2one('account.payment.term', related='partner_id.property_payment_term_id')
    property_account_receivable_id = fields.Many2one('account.account', related='partner_id.property_account_receivable_id')
    property_account_position_id = fields.Many2one('account.fiscal.position', related='partner_id.property_account_position_id')
    property_account_payable_id = fields.Many2one('account.account', related='partner_id.property_account_payable_id')
    picking_warn_msg = fields.Text(related='partner_id.picking_warn_msg')
    picking_warn = fields.Selection([('1','1')], related='partner_id.picking_warn')
    phone = fields.Char(related='partner_id.phone')
    payment_token_ids = fields.One2many('payment.token', related='partner_id.payment_token_ids')
    payment_token_count = fields.Integer(related='partner_id.payment_token_count')
    payment_next_action_date = fields.Date(related='partner_id.payment_next_action_date')
    payment_next_action = fields.Text(related='partner_id.payment_next_action')
    partner_share = fields.Boolean(related='partner_id.partner_share')
    parent_name = fields.Char(related='partner_id.parent_name')
    parent_id = fields.Many2one('res.partner', related='partner_id.parent_id')
    opt_out = fields.Boolean(related='partner_id.opt_out')
    notify_email = fields.Selection([('1','1')], related='partner_id.notify_email')
    name = fields.Char(related='partner_id.name')
    mobile = fields.Char(related='partner_id.mobile')
    message_unread_counter = fields.Integer(related='partner_id.message_unread_counter')
    message_unread = fields.Boolean(related='partner_id.message_unread')
    message_partner_ids = fields.Many2many('res.partner', related='partner_id.message_partner_ids')
    message_needaction_counter = fields.Integer(related='partner_id.message_needaction_counter')
    message_needaction = fields.Boolean(related='partner_id.message_needaction')
    message_last_post = fields.Datetime(related='partner_id.message_last_post')
    message_is_follower = fields.Boolean(related='partner_id.message_is_follower')
    message_bounce = fields.Integer(related='partner_id.message_bounce')
    last_time_entries_checked = fields.Datetime(related='partner_id.last_time_entries_checked')
    lang = fields.Selection([('1','1')], related='partner_id.lang')
    journal_item_count = fields.Integer(related='partner_id.journal_item_count')
    issued_total = fields.Monetary(related='partner_id.issued_total')
    is_pharmacy = fields.Boolean(related='partner_id.is_pharmacy')
    is_person = fields.Boolean(related='partner_id.is_person')
    is_patient = fields.Boolean(related='partner_id.is_patient')
    is_insurance_company = fields.Boolean(related='partner_id.is_insurance_company')
    is_institution = fields.Boolean(related='partner_id.is_institution')
    is_doctor = fields.Boolean(related='partner_id.is_doctor')
    is_company = fields.Boolean(related='partner_id.is_company')
    invoice_warn_msg = fields.Text(related='partner_id.invoice_warn_msg')
    invoice_warn = fields.Selection([('1','1')], related='partner_id.invoice_warn')
    invoice_ids = fields.One2many('account.invoice', related='partner_id.invoice_ids')
    image_small = fields.Binary(related='partner_id.image_small')
    image_medium = fields.Binary(related='partner_id.image_medium')
    image = fields.Binary(related='partner_id.image')
    im_status = fields.Char(related='partner_id.im_status')
    identify_card = fields.Char(related='partner_id.identify_card')
    has_unreconciled_entries = fields.Boolean(related='partner_id.has_unreconciled_entries')
    function = fields.Char(related='partner_id.function')
    fax = fields.Char(related='partner_id.fax')
    estbday = fields.Date(related='partner_id.estbday')
    employee = fields.Boolean(related='partner_id.employee')
    email_formatted = fields.Char(related='partner_id.email_formatted')
    email = fields.Char(related='partner_id.email')
    district_id = fields.Many2one('res.country.district', related='partner_id.district_id')
    debit_limit = fields.Monetary(related='partner_id.debit_limit')
    debit = fields.Monetary(related='partner_id.debit')
    date = fields.Date(related='partner_id.date')
    customer_code = fields.Char(related='partner_id.customer_code')
    customer = fields.Boolean(related='partner_id.customer')
    currency_id = fields.Many2one('res.currency', related='partner_id.currency_id')
    credit_limit = fields.Float(related='partner_id.credit_limit')
    credit = fields.Monetary(related='partner_id.credit')
    country_id = fields.Many2one('res.country', related='partner_id.country_id')
    contracts_count = fields.Integer(related='partner_id.contracts_count')
    contract_ids = fields.One2many('account.analytic.account', related='partner_id.contract_ids')
    contact_address = fields.Char(related='partner_id.contact_address')
    company_type = fields.Selection([('1','1')], related='partner_id.company_type')
    company_name = fields.Char(related='partner_id.company_name')
    company_id = fields.Many2one('res.company', related='partner_id.company_id')
    commercial_partner_id = fields.Many2one('res.partner', related='partner_id.commercial_partner_id')
    commercial_company_name = fields.Char(related='partner_id.commercial_company_name')
    comment = fields.Text(related='partner_id.comment')
    color = fields.Integer(related='partner_id.color')
    city = fields.Char(related='partner_id.city')
    child_ids = fields.One2many('res.partner', related='partner_id.child_ids')
    channel_ids = fields.Many2many('mail.channel', related='partner_id.channel_ids')
    category_id = fields.Many2many('res.partner.category', related='partner_id.category_id')
    birthday = fields.Date(related='partner_id.birthday')
    barcode = fields.Char(related='partner_id.barcode')
    bank_ids = fields.One2many('res.partner.bank', related='partner_id.bank_ids')
    bank_account_count = fields.Integer(related='partner_id.bank_account_count')
    active = fields.Boolean(related='partner_id.active')

class MedicalHealthCenterPharmacyLine(models.Model):
    _name = 'medical.health.center.pharmacy.line'
    pricelist_id = fields.Many2one('product.pricelist')
    doctor = fields.Many2one('medical.physician')
    name = fields.Many2one('medical.prescription')
    patient = fields.Many2one('medical.patient')
    pharmacy_id = fields.Many2one('medical.health.center.pharmacy')
    amount_total = fields.Monetary()
    prescription_lines = fields.One2many('medical.health.center.pharmacy.prescription.line', 'prescription_id')
    state = fields.Selection([('1','1')])
    info = fields.Text()
    currency_id = fields.Many2one('res.currency', related='pricelist_id.currency_id')

class MedicalHealthCenterPharmacyPrescriptionLine(models.Model):
    _name = 'medical.health.center.pharmacy.prescription.line'
    price_subtotal = fields.Float()
    price_unit = fields.Float()
    actual_qty = fields.Integer()
    qty = fields.Integer()
    name = fields.Many2one('medical.medicines')
    prescription_id = fields.Many2one('medical.health.center.pharmacy.line')
    indication = fields.Many2one('medical.pathology')

class MedicalHealthCenterWard(models.Model):
    _name = 'medical.health.center.ward'
    symptom_polydipsia = fields.Boolean()
    symptom_pruritus = fields.Boolean()
    symptom_rectal_tenesmus = fields.Boolean()
    symptom_rinorrhea = fields.Boolean()
    symptom_vomiting = fields.Boolean()
    symptom_sore_throat = fields.Boolean()
    symptom_stress = fields.Boolean()
    symptom_thoracic_pain = fields.Boolean()
    symptom_tinnitus = fields.Boolean()
    symptom_urethral_discharge = fields.Boolean()
    symptom_vaginal_discharge = fields.Boolean()
    symptom_vertigo = fields.Boolean()
    symptom_vesical_tenesmus = fields.Boolean()
    symptom_weight_change = fields.Boolean()
    symptom_xerostomia = fields.Boolean()
    telephone = fields.Boolean()
    tv = fields.Boolean()
    bio_hazard = fields.Boolean()
    guest_sofa = fields.Boolean()
    internet = fields.Boolean()
    microwave = fields.Boolean()
    private = fields.Boolean()
    private_bathroom = fields.Boolean()
    refrigerator = fields.Boolean()
    show_on_dashboard = fields.Boolean()
    symptom_abdominal_distension = fields.Boolean()
    symptom_abdominal_pain = fields.Boolean()
    symptom_amenorrhea = fields.Boolean()
    symptom_arthralgia = fields.Boolean()
    symptom_amnesia = fields.Boolean()
    symptom_anorexia = fields.Boolean()
    symptom_astenia = fields.Boolean()
    symptom_blurry_vision = fields.Boolean()
    symptom_chest_pain = fields.Boolean()
    symptom_chest_pain_excercise = fields.Boolean()
    symptom_constipation = fields.Boolean()
    symptom_diarrhea = fields.Boolean()
    symptom_diplopia = fields.Boolean()
    symptom_disturb_sleep = fields.Boolean()
    symptom_dizziness = fields.Boolean()
    symptom_dysmenorrhea = fields.Boolean()
    symptom_dysphagia = fields.Boolean()
    symptom_ear_discharge = fields.Boolean()
    symptom_dyspnea = fields.Boolean()
    symptom_dysuria = fields.Boolean()
    symptom_epistaxis = fields.Boolean()
    symptom_eye_glasses = fields.Boolean()
    symptom_gingival_bleeding = fields.Boolean()
    symptom_headache = fields.Boolean()
    symptom_hematemesis = fields.Boolean()
    symptom_hemoptysis = fields.Boolean()
    symptom_hoarseness = fields.Boolean()
    symptom_insomnia = fields.Boolean()
    symptom_melena = fields.Boolean()
    symptom_lumbar_pain = fields.Boolean()
    symptom_nocturia = fields.Boolean()
    symptom_cervical_pain = fields.Boolean()
    symptom_menorrhagia = fields.Boolean()
    symptom_metrorrhagia = fields.Boolean()
    symptom_mood_swings = fields.Boolean()
    symptom_myalgia = fields.Boolean()
    symptom_nausea = fields.Boolean()
    symptom_odynophagia = fields.Boolean()
    symptom_orthopnea = fields.Boolean()
    symptom_orthostatic_hypotension = fields.Boolean()
    symptom_otalgia = fields.Boolean()
    symptom_pain = fields.Boolean()
    symptom_paralysis = fields.Boolean()
    symptom_paresthesia = fields.Boolean()
    symptom_sexual_dysfunction = fields.Boolean()
    symptom_pelvic_pain = fields.Boolean()
    symptom_photophobia = fields.Boolean()
    symptom_pollakiuria = fields.Boolean()
    ac = fields.Boolean()
    symptom_polyphagia = fields.Boolean()
    symptom_syncope = fields.Boolean()
    symptom_polyuria = fields.Boolean()
    symptom_proctorrhagia = fields.Boolean()
    name = fields.Char()
    room_count = fields.Integer()
    symptom_pain_intensity = fields.Integer()
    floor = fields.Integer()
    bed_count = fields.Integer()
    symptom_ids = fields.Many2many('medical.symptoms', relation='medical_health_center_ward_symptoms')
    location_id = fields.Many2one('stock.location')
    institution = fields.Many2one('medical.health.center')
    building = fields.Many2one('medical.health.center.building')
    user_ids = fields.One2many('res.users', 'department')
    state = fields.Selection([('1','1')])
    gender = fields.Selection([('1','1')])
    type = fields.Selection([('1','1')])
    kanban_dashboard_graph = fields.Text()
    kanban_dashboard = fields.Text()
    info = fields.Text()

class MedicalImaging(models.Model):
    _name = 'medical.imaging'
    image6 = fields.Binary()
    image1 = fields.Binary()
    image2 = fields.Binary()
    image3 = fields.Binary()
    image4 = fields.Binary()
    image5 = fields.Binary()
    name = fields.Char()
    patient_code = fields.Char()
    dob = fields.Date()
    date_analysis = fields.Datetime()
    date_requested = fields.Datetime()
    walkin_id = fields.Many2one('medical.appointment.register.walkin')
    department = fields.Many2one('medical.health.center.ward')
    patient = fields.Many2one('medical.patient')
    receiving_id = fields.Many2one('medical.receiving.patient')
    requestor = fields.Many2one('medical.physician')
    test_type = fields.Many2one('medical.imaging.test.type')
    material_ids = fields.One2many('medical.imaging.material', 'parent_id')
    sex = fields.Selection([('1','1')])
    state = fields.Selection([('1','1')])
    analysis = fields.Text()
    conclusion = fields.Text()

class MedicalImagingMaterial(models.Model):
    _name = 'medical.imaging.material'
    quantity = fields.Integer()
    sequence = fields.Integer()
    parent_id = fields.Many2one('medical.imaging')
    product_id = fields.Many2one('product.product')
    uom_id = fields.Many2one('product.uom')

class MedicalImagingReport(models.Model):
    _name = 'medical.imaging.report'
    name = fields.Char()
    date_requested = fields.Date()
    count_total = fields.Float()
    requestor = fields.Many2one('medical.physician')
    test_type = fields.Many2one('medical.imaging.test.type')
    department = fields.Many2one('medical.health.center.ward')
    patient = fields.Many2one('medical.patient')
    state = fields.Selection([('1','1')])

class MedicalImagingTestMaterial(models.Model):
    _name = 'medical.imaging.test.material'
    quantity = fields.Integer()
    sequence = fields.Integer()
    parent_id = fields.Many2one('medical.imaging.test.type')
    product_id = fields.Many2one('product.product')
    uom_id = fields.Many2one('product.uom')

class MedicalImagingTestType(models.Model):
    _name = 'medical.imaging.test.type'
    code = fields.Char()
    name = fields.Char()
    test_charge = fields.Float()
    material_ids = fields.One2many('medical.imaging.test.material', 'parent_id')
    note = fields.Text()

class MedicalInpatient(models.Model):
    _name = 'medical.inpatient'
    name = fields.Char()
    admission_date = fields.Datetime()
    discharge_date = fields.Datetime()
    ward = fields.Many2one('medical.health.center.ward')
    admission_reason = fields.Many2one('medical.pathology')
    bed = fields.Many2one('medical.health.center.beds')
    operating_physician = fields.Many2one('medical.physician')
    patient = fields.Many2one('medical.patient')
    attending_physician = fields.Many2one('medical.physician')
    walkin = fields.Many2one('medical.appointment.register.walkin')
    state = fields.Selection([('1','1')])
    admission_type = fields.Selection([('1','1')])
    admission_condition = fields.Text()
    discharge_plan = fields.Text()
    info = fields.Text()
    nursing_plan = fields.Text()

class MedicalInpatientMydetails(models.Model):
    _name = 'medical.inpatient.mydetails'
    admission_type = fields.Char()
    name = fields.Char()
    discharge_date = fields.Datetime()
    admission_date = fields.Datetime()
    admission_reason = fields.Many2one('medical.pathology')
    operating_physician = fields.Many2one('medical.physician')
    ward = fields.Many2one('medical.health.center.ward')
    attending_physician = fields.Many2one('medical.physician')
    bed = fields.Many2one('medical.health.center.beds')
    patient = fields.Many2one('medical.patient')
    state = fields.Selection([('1','1')])
    discharge_plan = fields.Text()
    admission_condition = fields.Text()
    info = fields.Text()
    nursing_plan = fields.Text()

class MedicalInsurance(models.Model):
    _name = 'medical.insurance'
    ins_no = fields.Char()
    address_register = fields.Char()
    start_date = fields.Date()
    exp_date = fields.Date()
    partner_id = fields.Many2one('res.partner')
    ins_type = fields.Many2one('medical.insurance.type')
    patient = fields.Many2one('medical.patient')
    state = fields.Selection([('1','1')])
    route = fields.Selection([('1','1')])
    ins_kind = fields.Selection([('1','1')])
    info = fields.Text()
    zip = fields.Char(related='partner_id.zip')
    website = fields.Char(related='partner_id.website')
    wards_id = fields.Many2one('res.country.wards', related='partner_id.wards_id')
    vat = fields.Char(related='partner_id.vat')
    user_ids = fields.One2many('res.users', related='partner_id.user_ids')
    user_id = fields.Many2one('res.users', related='partner_id.user_id')
    unreconciled_aml_ids = fields.One2many('account.move.line', related='partner_id.unreconciled_aml_ids')
    tz_offset = fields.Char(related='partner_id.tz_offset')
    tz = fields.Selection([('1','1')], related='partner_id.tz')
    type = fields.Selection([('1','1')], related='partner_id.type')
    trust = fields.Selection([('1','1')], related='partner_id.trust')
    total_invoiced = fields.Monetary(related='partner_id.total_invoiced')
    title = fields.Many2one('res.partner.title', related='partner_id.title')
    team_id = fields.Many2one('crm.team', related='partner_id.team_id')
    supplier_invoice_count = fields.Integer(related='partner_id.supplier_invoice_count')
    supplier = fields.Boolean(related='partner_id.supplier')
    street2 = fields.Char(related='partner_id.street2')
    street = fields.Char(related='partner_id.street')
    state_id = fields.Many2one('res.country.state', related='partner_id.state_id')
    signup_valid = fields.Boolean(related='partner_id.signup_valid')
    signup_url = fields.Char(related='partner_id.signup_url')
    signup_type = fields.Char(related='partner_id.signup_type')
    signup_token = fields.Char(related='partner_id.signup_token')
    signup_expiration = fields.Datetime(related='partner_id.signup_expiration')
    self = fields.Many2one('res.partner', related='partner_id.self')
    sale_warn_msg = fields.Text(related='partner_id.sale_warn_msg')
    sale_warn = fields.Selection([('1','1')], related='partner_id.sale_warn')
    sale_order_ids = fields.One2many('sale.order', related='partner_id.sale_order_ids')
    sale_order_count = fields.Integer(related='partner_id.sale_order_count')
    ref_company_ids = fields.One2many('res.company', related='partner_id.ref_company_ids')
    ref = fields.Char(related='partner_id.ref')
    purchase_warn_msg = fields.Text(related='partner_id.purchase_warn_msg')
    purchase_warn = fields.Selection([('1','1')], related='partner_id.purchase_warn')
    purchase_order_count = fields.Integer(related='partner_id.purchase_order_count')
    property_supplier_payment_term_id = fields.Many2one('account.payment.term', related='partner_id.property_supplier_payment_term_id')
    property_stock_supplier = fields.Many2one('stock.location', related='partner_id.property_stock_supplier')
    property_stock_customer = fields.Many2one('stock.location', related='partner_id.property_stock_customer')
    property_purchase_currency_id = fields.Many2one('res.currency', related='partner_id.property_purchase_currency_id')
    property_product_pricelist = fields.Many2one('product.pricelist', related='partner_id.property_product_pricelist')
    property_payment_term_id = fields.Many2one('account.payment.term', related='partner_id.property_payment_term_id')
    property_account_receivable_id = fields.Many2one('account.account', related='partner_id.property_account_receivable_id')
    property_account_position_id = fields.Many2one('account.fiscal.position', related='partner_id.property_account_position_id')
    property_account_payable_id = fields.Many2one('account.account', related='partner_id.property_account_payable_id')
    picking_warn_msg = fields.Text(related='partner_id.picking_warn_msg')
    picking_warn = fields.Selection([('1','1')], related='partner_id.picking_warn')
    phone = fields.Char(related='partner_id.phone')
    payment_token_ids = fields.One2many('payment.token', related='partner_id.payment_token_ids')
    payment_token_count = fields.Integer(related='partner_id.payment_token_count')
    payment_next_action_date = fields.Date(related='partner_id.payment_next_action_date')
    payment_next_action = fields.Text(related='partner_id.payment_next_action')
    partner_share = fields.Boolean(related='partner_id.partner_share')
    parent_name = fields.Char(related='partner_id.parent_name')
    parent_id = fields.Many2one('res.partner', related='partner_id.parent_id')
    opt_out = fields.Boolean(related='partner_id.opt_out')
    notify_email = fields.Selection([('1','1')], related='partner_id.notify_email')
    name = fields.Char(related='partner_id.name')
    mobile = fields.Char(related='partner_id.mobile')
    message_unread_counter = fields.Integer(related='partner_id.message_unread_counter')
    message_unread = fields.Boolean(related='partner_id.message_unread')
    message_partner_ids = fields.Many2many('res.partner', related='partner_id.message_partner_ids')
    message_needaction_counter = fields.Integer(related='partner_id.message_needaction_counter')
    message_needaction = fields.Boolean(related='partner_id.message_needaction')
    message_last_post = fields.Datetime(related='partner_id.message_last_post')
    message_is_follower = fields.Boolean(related='partner_id.message_is_follower')
    message_bounce = fields.Integer(related='partner_id.message_bounce')
    last_time_entries_checked = fields.Datetime(related='partner_id.last_time_entries_checked')
    lang = fields.Selection([('1','1')], related='partner_id.lang')
    journal_item_count = fields.Integer(related='partner_id.journal_item_count')
    issued_total = fields.Monetary(related='partner_id.issued_total')
    is_pharmacy = fields.Boolean(related='partner_id.is_pharmacy')
    is_person = fields.Boolean(related='partner_id.is_person')
    is_patient = fields.Boolean(related='partner_id.is_patient')
    is_insurance_company = fields.Boolean(related='partner_id.is_insurance_company')
    is_institution = fields.Boolean(related='partner_id.is_institution')
    is_doctor = fields.Boolean(related='partner_id.is_doctor')
    is_company = fields.Boolean(related='partner_id.is_company')
    invoice_warn_msg = fields.Text(related='partner_id.invoice_warn_msg')
    invoice_warn = fields.Selection([('1','1')], related='partner_id.invoice_warn')
    invoice_ids = fields.One2many('account.invoice', related='partner_id.invoice_ids')
    image_small = fields.Binary(related='partner_id.image_small')
    image_medium = fields.Binary(related='partner_id.image_medium')
    image = fields.Binary(related='partner_id.image')
    im_status = fields.Char(related='partner_id.im_status')
    identify_card = fields.Char(related='partner_id.identify_card')
    has_unreconciled_entries = fields.Boolean(related='partner_id.has_unreconciled_entries')
    function = fields.Char(related='partner_id.function')
    fax = fields.Char(related='partner_id.fax')
    estbday = fields.Date(related='partner_id.estbday')
    employee = fields.Boolean(related='partner_id.employee')
    email_formatted = fields.Char(related='partner_id.email_formatted')
    email = fields.Char(related='partner_id.email')
    district_id = fields.Many2one('res.country.district', related='partner_id.district_id')
    debit_limit = fields.Monetary(related='partner_id.debit_limit')
    debit = fields.Monetary(related='partner_id.debit')
    date = fields.Date(related='partner_id.date')
    customer_code = fields.Char(related='partner_id.customer_code')
    customer = fields.Boolean(related='partner_id.customer')
    currency_id = fields.Many2one('res.currency', related='partner_id.currency_id')
    credit_limit = fields.Float(related='partner_id.credit_limit')
    credit = fields.Monetary(related='partner_id.credit')
    country_id = fields.Many2one('res.country', related='partner_id.country_id')
    contracts_count = fields.Integer(related='partner_id.contracts_count')
    contract_ids = fields.One2many('account.analytic.account', related='partner_id.contract_ids')
    contact_address = fields.Char(related='partner_id.contact_address')
    company_type = fields.Selection([('1','1')], related='partner_id.company_type')
    company_name = fields.Char(related='partner_id.company_name')
    company_id = fields.Many2one('res.company', related='partner_id.company_id')
    commercial_partner_id = fields.Many2one('res.partner', related='partner_id.commercial_partner_id')
    commercial_company_name = fields.Char(related='partner_id.commercial_company_name')
    comment = fields.Text(related='partner_id.comment')
    color = fields.Integer(related='partner_id.color')
    city = fields.Char(related='partner_id.city')
    child_ids = fields.One2many('res.partner', related='partner_id.child_ids')
    channel_ids = fields.Many2many('mail.channel', related='partner_id.channel_ids')
    category_id = fields.Many2many('res.partner.category', related='partner_id.category_id')
    birthday = fields.Date(related='partner_id.birthday')
    barcode = fields.Char(related='partner_id.barcode')
    bank_ids = fields.One2many('res.partner.bank', related='partner_id.bank_ids')
    bank_account_count = fields.Integer(related='partner_id.bank_account_count')
    active = fields.Boolean(related='partner_id.active')

class MedicalInsuranceType(models.Model):
    _name = 'medical.insurance.type'
    name = fields.Char()

class MedicalLabResultcriteria(models.Model):
    _name = 'medical.lab.resultcriteria'
    name = fields.Char()
    sequence = fields.Integer()
    medical_lab_test_id = fields.Many2one('medical.lab.test')
    units = fields.Many2one('medical.lab.units')
    normal_range = fields.Text()
    result = fields.Text()

class MedicalLabTest(models.Model):
    _name = 'medical.lab.test'
    city = fields.Char()
    zip = fields.Char()
    street2 = fields.Char()
    name = fields.Char()
    street = fields.Char()
    dob = fields.Date()
    date_analysis = fields.Datetime()
    date_requested = fields.Datetime()
    wards_id = fields.Many2one('res.country.wards')
    country_id = fields.Many2one('res.country')
    department = fields.Many2one('medical.health.center.ward')
    district_id = fields.Many2one('res.country.district')
    pathologist = fields.Many2one('medical.physician')
    receiving_id = fields.Many2one('medical.receiving.patient')
    requestor = fields.Many2one('medical.physician')
    state_id = fields.Many2one('res.country.state')
    patient = fields.Many2one('medical.patient')
    test_type = fields.Many2one('medical.labtest.types')
    walkin = fields.Many2one('medical.appointment.register.walkin')
    material_ids = fields.One2many('medical.lab.test.materials', 'lab_test_id')
    lab_test_criteria = fields.One2many('medical.lab.resultcriteria', 'medical_lab_test_id')
    sex = fields.Selection([('1','1')])
    state = fields.Selection([('1','1')])
    results = fields.Text()
    diagnosis = fields.Text()

class MedicalLabTestMaterials(models.Model):
    _name = 'medical.lab.test.materials'
    name = fields.Char()
    quantity = fields.Float()
    sequence = fields.Integer()
    lab_test_id = fields.Many2one('medical.lab.test')
    product_id = fields.Many2one('product.product')
    uom_id = fields.Many2one('product.uom')

class MedicalLabUnits(models.Model):
    _name = 'medical.lab.units'
    code = fields.Char()
    name = fields.Char()

class MedicalLabtestCriteria(models.Model):
    _name = 'medical.labtest.criteria'
    name = fields.Char()
    sequence = fields.Integer()
    medical_type_id = fields.Many2one('medical.labtest.types')
    units = fields.Many2one('medical.lab.units')
    normal_range = fields.Text()

class MedicalLabtestTypes(models.Model):
    _name = 'medical.labtest.types'
    code = fields.Char()
    name = fields.Char()
    test_charge = fields.Float()
    lab_criteria = fields.One2many('medical.labtest.criteria', 'medical_type_id')
    material_ids = fields.One2many('medical.labtest.types.materials', 'type_id')
    info = fields.Text()

class MedicalLabtestTypesMaterials(models.Model):
    _name = 'medical.labtest.types.materials'
    name = fields.Char()
    quantity = fields.Float()
    sequence = fields.Integer()
    product_id = fields.Many2one('product.product')
    type_id = fields.Many2one('medical.labtest.types')
    uom_id = fields.Many2one('product.uom')

class MedicalLabtestsReport(models.Model):
    _name = 'medical.labtests.report'
    name = fields.Char()
    date_requested = fields.Date()
    count_total = fields.Float()
    patient = fields.Many2one('medical.patient')
    test_type = fields.Many2one('medical.labtest.types')
    department = fields.Many2one('medical.health.center.ward')
    pathologist = fields.Many2one('medical.physician')
    state = fields.Selection([('1','1')])

class MedicalMedicines(models.Model):
    _name = 'medical.medicines'
    pregnancy_warning = fields.Boolean()
    therapeutic_action = fields.Char()
    product_id = fields.Many2one('product.product')
    medicament_type = fields.Selection([('1','1')])
    indications = fields.Text()
    adverse_reaction = fields.Text()
    composition = fields.Text()
    pregnancy = fields.Text()
    dosage = fields.Text()
    overdosage = fields.Text()
    info = fields.Text()
    storage = fields.Text()
    weight = fields.Float(related='product_id.weight')
    warranty = fields.Float(related='product_id.warranty')
    warehouse_id = fields.Many2one('stock.warehouse', related='product_id.warehouse_id')
    volume = fields.Float(related='product_id.volume')
    virtual_available = fields.Float(related='product_id.virtual_available')
    valuation = fields.Char(related='product_id.valuation')
    uom_po_id = fields.Many2one('product.uom', related='product_id.uom_po_id')
    uom_id = fields.Many2one('product.uom', related='product_id.uom_id')
    type = fields.Selection([('1','1')], related='product_id.type')
    tracking = fields.Selection([('1','1')], related='product_id.tracking')
    track_service = fields.Selection([('1','1')], related='product_id.track_service')
    taxes_id = fields.Many2many('account.tax', related='product_id.taxes_id')
    supplier_taxes_id = fields.Many2many('account.tax', related='product_id.supplier_taxes_id')
    stock_quant_ids = fields.One2many('stock.quant', related='product_id.stock_quant_ids')
    stock_move_ids = fields.One2many('stock.move', related='product_id.stock_move_ids')
    standard_price = fields.Float(related='product_id.standard_price')
    sequence = fields.Integer(related='product_id.sequence')
    seller_ids = fields.One2many('product.supplierinfo', related='product_id.seller_ids')
    sales_count = fields.Integer(related='product_id.sales_count')
    sale_ok = fields.Boolean(related='product_id.sale_ok')
    sale_line_warn_msg = fields.Text(related='product_id.sale_line_warn_msg')
    sale_line_warn = fields.Selection([('1','1')], related='product_id.sale_line_warn')
    sale_delay = fields.Float(related='product_id.sale_delay')
    route_ids = fields.Many2many('stock.location.route', related='product_id.route_ids')
    route_from_categ_ids = fields.Many2many('stock.location.route', related='product_id.route_from_categ_ids')
    reordering_min_qty = fields.Float(related='product_id.reordering_min_qty')
    reordering_max_qty = fields.Float(related='product_id.reordering_max_qty')
    rental = fields.Boolean(related='product_id.rental')
    reception_count = fields.Integer(related='product_id.reception_count')
    qty_available = fields.Float(related='product_id.qty_available')
    purchase_ok = fields.Boolean(related='product_id.purchase_ok')
    purchase_method = fields.Selection([('1','1')], related='product_id.purchase_method')
    purchase_line_warn_msg = fields.Text(related='product_id.purchase_line_warn_msg')
    purchase_line_warn = fields.Selection([('1','1')], related='product_id.purchase_line_warn')
    purchase_count = fields.Integer(related='product_id.purchase_count')
    property_valuation = fields.Selection([('1','1')], related='product_id.property_valuation')
    property_stock_production = fields.Many2one('stock.location', related='product_id.property_stock_production')
    property_stock_procurement = fields.Many2one('stock.location', related='product_id.property_stock_procurement')
    property_stock_inventory = fields.Many2one('stock.location', related='product_id.property_stock_inventory')
    property_stock_account_output = fields.Many2one('account.account', related='product_id.property_stock_account_output')
    property_stock_account_input = fields.Many2one('account.account', related='product_id.property_stock_account_input')
    property_cost_method = fields.Selection([('1','1')], related='product_id.property_cost_method')
    property_account_income_id = fields.Many2one('account.account', related='product_id.property_account_income_id')
    property_account_expense_id = fields.Many2one('account.account', related='product_id.property_account_expense_id')
    property_account_creditor_price_difference = fields.Many2one('account.account', related='product_id.property_account_creditor_price_difference')
    product_variant_ids = fields.One2many('product.product', related='product_id.product_variant_ids')
    product_variant_id = fields.Many2one('product.product', related='product_id.product_variant_id')
    product_variant_count = fields.Integer(related='product_id.product_variant_count')
    product_tmpl_id = fields.Many2one('product.template', related='product_id.product_tmpl_id')
    pricelist_item_ids = fields.Many2many('product.pricelist.item', related='product_id.pricelist_item_ids')
    pricelist_id = fields.Many2one('product.pricelist', related='product_id.pricelist_id')
    price_extra = fields.Float(related='product_id.price_extra')
    price = fields.Float(related='product_id.price')
    partner_ref = fields.Char(related='product_id.partner_ref')
    packaging_ids = fields.One2many('product.packaging', related='product_id.packaging_ids')
    outgoing_qty = fields.Float(related='product_id.outgoing_qty')
    orderpoint_ids = fields.One2many('stock.warehouse.orderpoint', related='product_id.orderpoint_ids')
    nbr_reordering_rules = fields.Integer(related='product_id.nbr_reordering_rules')
    name = fields.Char(related='product_id.name')
    message_unread_counter = fields.Integer(related='product_id.message_unread_counter')
    message_unread = fields.Boolean(related='product_id.message_unread')
    message_partner_ids = fields.Many2many('res.partner', related='product_id.message_partner_ids')
    message_needaction_counter = fields.Integer(related='product_id.message_needaction_counter')
    message_needaction = fields.Boolean(related='product_id.message_needaction')
    message_last_post = fields.Datetime(related='product_id.message_last_post')
    message_is_follower = fields.Boolean(related='product_id.message_is_follower')
    lst_price = fields.Float(related='product_id.lst_price')
    location_id = fields.Many2one('stock.location', related='product_id.location_id')
    list_price = fields.Float(related='product_id.list_price')
    item_ids = fields.One2many('product.pricelist.item', related='product_id.item_ids')
    is_vaccine = fields.Boolean(related='product_id.is_vaccine')
    is_medicine = fields.Boolean(related='product_id.is_medicine')
    is_medical_supply = fields.Boolean(related='product_id.is_medical_supply')
    is_insurance_plan = fields.Boolean(related='product_id.is_insurance_plan')
    is_bed = fields.Boolean(related='product_id.is_bed')
    invoice_policy = fields.Selection([('1','1')], related='product_id.invoice_policy')
    incoming_qty = fields.Float(related='product_id.incoming_qty')
    image_variant = fields.Binary(related='product_id.image_variant')
    image_small = fields.Binary(related='product_id.image_small')
    image_medium = fields.Binary(related='product_id.image_medium')
    image = fields.Binary(related='product_id.image')
    expense_policy = fields.Selection([('1','1')], related='product_id.expense_policy')
    description_sale = fields.Text(related='product_id.description_sale')
    description_purchase = fields.Text(related='product_id.description_purchase')
    description_picking = fields.Text(related='product_id.description_picking')
    description = fields.Text(related='product_id.description')
    delivery_count = fields.Integer(related='product_id.delivery_count')
    deferred_revenue_category_id = fields.Many2one('account.asset.category', related='product_id.deferred_revenue_category_id')
    default_code = fields.Char(related='product_id.default_code')
    currency_id = fields.Many2one('res.currency', related='product_id.currency_id')
    cost_method = fields.Char(related='product_id.cost_method')
    company_id = fields.Many2one('res.company', related='product_id.company_id')
    color = fields.Integer(related='product_id.color')
    code = fields.Char(related='product_id.code')
    categ_id = fields.Many2one('product.category', related='product_id.categ_id')
    barcode = fields.Char(related='product_id.barcode')
    attribute_value_ids = fields.Many2many('product.attribute.value', related='product_id.attribute_value_ids')
    attribute_line_ids = fields.One2many('product.attribute.line', related='product_id.attribute_line_ids')
    asset_category_id = fields.Many2one('account.asset.category', related='product_id.asset_category_id')
    active = fields.Boolean(related='product_id.active')

class MedicalOccupation(models.Model):
    _name = 'medical.occupation'
    code = fields.Char()
    name = fields.Char()

class MedicalPathology(models.Model):
    _name = 'medical.pathology'
    gene = fields.Char()
    code = fields.Char()
    chromosome = fields.Char()
    name = fields.Char()
    protein = fields.Char()
    category = fields.Many2one('medical.pathology.category')
    info = fields.Text()

class MedicalPathologyCategory(models.Model):
    _name = 'medical.pathology.category'
    active = fields.Boolean()
    name = fields.Char()
    parent_id = fields.Many2one('medical.pathology.category')
    child_ids = fields.One2many('medical.pathology.category', 'parent_id')

class MedicalPatient(models.Model):
    _name = 'medical.patient'
    qrcode = fields.Binary()
    prison_current = fields.Boolean()
    deceased = fields.Boolean()
    diet = fields.Boolean()
    laxative_chk = fields.Boolean()
    hypertension_chk = fields.Boolean()
    lmp_chk = fields.Boolean()
    hostile_area = fields.Boolean()
    home_safety = fields.Boolean()
    alcohol = fields.Boolean()
    helmet = fields.Boolean()
    hbv_infection_chk = fields.Boolean()
    works_at_home = fields.Boolean()
    menopausal = fields.Boolean()
    water = fields.Boolean()
    working_children = fields.Boolean()
    gas = fields.Boolean()
    menorrhagia_chk = fields.Boolean()
    trash = fields.Boolean()
    fertile = fields.Boolean()
    traffic_laws = fields.Boolean()
    aspirin_chk = fields.Boolean()
    television = fields.Boolean()
    telephone = fields.Boolean()
    teenage_pregnancy = fields.Boolean()
    bleeding_pv_chk = fields.Boolean()
    motorcycle_rider = fields.Boolean()
    odd_customer = fields.Boolean()
    ex_smoker = fields.Boolean()
    breast_self_examination = fields.Boolean()
    ihd_chk = fields.Boolean()
    car_child_safety = fields.Boolean()
    car_revision = fields.Boolean()
    car_seat_belt = fields.Boolean()
    ex_drug_addict = fields.Boolean()
    ex_alcoholic = fields.Boolean()
    mammography = fields.Boolean()
    internet = fields.Boolean()
    colposcopy = fields.Boolean()
    exercise = fields.Boolean()
    coffee = fields.Boolean()
    nsaids_chk = fields.Boolean()
    cold_chk = fields.Boolean()
    eats_alone = fields.Boolean()
    dysmenorrhoea_chk = fields.Boolean()
    surgery_chk = fields.Boolean()
    last_pap_smear_chk = fields.Boolean()
    soft_drinks = fields.Boolean()
    drug_iv = fields.Boolean()
    smoking = fields.Boolean()
    drug_addiction = fields.Boolean()
    sleep_during_daytime = fields.Boolean()
    single_parent = fields.Boolean()
    sex_with_prostitutes = fields.Boolean()
    domestic_violence = fields.Boolean()
    pap_test = fields.Boolean()
    sexual_abuse = fields.Boolean()
    sewers = fields.Boolean()
    second_hand_smoker = fields.Boolean()
    salt = fields.Boolean()
    electricity = fields.Boolean()
    school_withdrawal = fields.Boolean()
    currently_pregnant = fields.Boolean()
    relative_in_prison = fields.Boolean()
    prostitute = fields.Boolean()
    dm_chk = fields.Boolean()
    prison_past = fields.Boolean()
    drug_usage = fields.Boolean()
    gpa = fields.Char()
    yob = fields.Char()
    citizen_id = fields.Char()
    ssn = fields.Char()
    diet_info = fields.Char()
    age = fields.Char()
    identification_code = fields.Char()
    pap_test_last = fields.Date()
    dod = fields.Date()
    mammography_last = fields.Date()
    lmp_dt = fields.Date()
    dob = fields.Date()
    colposcopy_last = fields.Date()
    last_exam_date = fields.Datetime()
    admission_count = fields.Integer()
    smoking_number = fields.Integer()
    premature = fields.Integer()
    deaths_1st_week = fields.Integer()
    abortions = fields.Integer()
    sexual_partners_number = fields.Integer()
    sleep_hours = fields.Integer()
    prescription_count = fields.Integer()
    menarche = fields.Integer()
    alcohol_liquor_number = fields.Integer()
    alcohol_beer_number = fields.Integer()
    age_start_smoking = fields.Integer()
    age_start_drugs = fields.Integer()
    hours_outside = fields.Integer()
    age_start_drinking = fields.Integer()
    age_quit_smoking = fields.Integer()
    age_quit_drugs = fields.Integer()
    invoice_count = fields.Integer()
    deaths_2nd_week = fields.Integer()
    number_of_meals = fields.Integer()
    coffee_cups = fields.Integer()
    insurance_count = fields.Integer()
    exercise_minutes_day = fields.Integer()
    born_alive = fields.Integer()
    first_sexual_encounter = fields.Integer()
    age_quit_drinking = fields.Integer()
    app_count = fields.Integer()
    full_term = fields.Integer()
    vaccine_count = fields.Integer()
    menopause = fields.Integer()
    gravida = fields.Integer()
    alcohol_wine_number = fields.Integer()
    drugs = fields.Many2many('medical.recreational.drugs', relation='medical_patient_recreational_drugs_rel')
    genetic_risks = fields.Many2many('medical.genetics', relation='medical_genetic_risks_rel')
    cod = fields.Many2one('medical.pathology')
    ethnic_group = fields.Many2one('medical.ethnicity')
    current_insurance = fields.Many2one('medical.insurance')
    doctor = fields.Many2one('medical.physician')
    occupation = fields.Many2one('medical.occupation')
    district_id = fields.Many2one('res.country.district')
    oeh_patient_user_id = fields.Many2one('res.users')
    wards_id = fields.Many2one('res.country.wards')
    partner_id = fields.Many2one('res.partner')
    gyneco_ids = fields.One2many('medical.gyneco', 'patient')
    call_log_ids = fields.One2many('medical.patient.call.log', 'patient')
    evaluation_ids = fields.One2many('medical.evaluation', 'patient')
    family = fields.One2many('medical.patient.family', 'patient_id')
    imaging_ids = fields.One2many('medical.imaging', 'patient')
    ins_health_ids = fields.One2many('medical.insurance', 'patient')
    ins_health_other_ids = fields.One2many('medical.insurance', 'patient')
    lab_test_ids = fields.One2many('medical.lab.test', 'patient')
    medical_cert_ids = fields.One2many('medical.patient.medical.cert', 'patient')
    pediatrics_psc_ids = fields.One2many('medical.pediatrics.psc', 'patient')
    pediatrics_surgery_ids = fields.One2many('medical.surgery', 'patient')
    prescription_ids = fields.One2many('medical.physicians.prescription', 'patient')
    prescription_line = fields.One2many('medical.prescription.line', 'patient')
    walkin_ids = fields.One2many('medical.appointment.register.walkin', 'patient')
    socioeconomics = fields.Selection([('1','1')])
    housing_condition = fields.Selection([('1','1')])
    rh = fields.Selection([('1','1')])
    marital_status = fields.Selection([('1','1')])
    apgar_affection = fields.Selection([('1','1')])
    sex_oral = fields.Selection([('1','1')])
    apgar_discussion = fields.Selection([('1','1')])
    apgar_decision = fields.Selection([('1','1')])
    sex_anal = fields.Selection([('1','1')])
    education_level = fields.Selection([('1','1')])
    anticonceptive = fields.Selection([('1','1')])
    sexual_preferences = fields.Selection([('1','1')])
    blood_type = fields.Selection([('1','1')])
    apgar_timesharing = fields.Selection([('1','1')])
    income = fields.Selection([('1','1')])
    apgar_help = fields.Selection([('1','1')])
    sex = fields.Selection([('1','1')])
    sexual_practices = fields.Selection([('1','1')])
    sexual_partners = fields.Selection([('1','1')])
    others_drugs = fields.Text()
    info = fields.Text()
    ihd_remarks = fields.Text()
    last_pap_smear_remarks = fields.Text()
    aspirin_remarks = fields.Text()
    hypertension_remarks = fields.Text()
    laxative_remarks = fields.Text()
    lifestyle_info = fields.Text()
    hbv_infection_remarks = fields.Text()
    dysmenorrhoea_remarks = fields.Text()
    critical_info = fields.Text()
    general_info = fields.Text()
    menorrhagia_remarks = fields.Text()
    bleeding_pv_remarks = fields.Text()
    cold_remarks = fields.Text()
    surgery_remarks = fields.Text()
    sexuality_info = fields.Text()
    nsaids_remarks = fields.Text()
    dm_remarks = fields.Text()
    others_past_illness = fields.Text()
    zip = fields.Char(related='partner_id.zip')
    website = fields.Char(related='partner_id.website')
    vat = fields.Char(related='partner_id.vat')
    user_ids = fields.One2many('res.users', related='partner_id.user_ids')
    user_id = fields.Many2one('res.users', related='partner_id.user_id')
    unreconciled_aml_ids = fields.One2many('account.move.line', related='partner_id.unreconciled_aml_ids')
    tz_offset = fields.Char(related='partner_id.tz_offset')
    tz = fields.Selection([('1','1')], related='partner_id.tz')
    type = fields.Selection([('1','1')], related='partner_id.type')
    trust = fields.Selection([('1','1')], related='partner_id.trust')
    total_invoiced = fields.Monetary(related='partner_id.total_invoiced')
    title = fields.Many2one('res.partner.title', related='partner_id.title')
    team_id = fields.Many2one('crm.team', related='partner_id.team_id')
    supplier_invoice_count = fields.Integer(related='partner_id.supplier_invoice_count')
    supplier = fields.Boolean(related='partner_id.supplier')
    street2 = fields.Char(related='partner_id.street2')
    street = fields.Char(related='partner_id.street')
    state_id = fields.Many2one('res.country.state', related='partner_id.state_id')
    signup_valid = fields.Boolean(related='partner_id.signup_valid')
    signup_url = fields.Char(related='partner_id.signup_url')
    signup_type = fields.Char(related='partner_id.signup_type')
    signup_token = fields.Char(related='partner_id.signup_token')
    signup_expiration = fields.Datetime(related='partner_id.signup_expiration')
    self = fields.Many2one('res.partner', related='partner_id.self')
    sale_warn_msg = fields.Text(related='partner_id.sale_warn_msg')
    sale_warn = fields.Selection([('1','1')], related='partner_id.sale_warn')
    sale_order_ids = fields.One2many('sale.order', related='partner_id.sale_order_ids')
    sale_order_count = fields.Integer(related='partner_id.sale_order_count')
    ref_company_ids = fields.One2many('res.company', related='partner_id.ref_company_ids')
    ref = fields.Char(related='partner_id.ref')
    purchase_warn_msg = fields.Text(related='partner_id.purchase_warn_msg')
    purchase_warn = fields.Selection([('1','1')], related='partner_id.purchase_warn')
    purchase_order_count = fields.Integer(related='partner_id.purchase_order_count')
    property_supplier_payment_term_id = fields.Many2one('account.payment.term', related='partner_id.property_supplier_payment_term_id')
    property_stock_supplier = fields.Many2one('stock.location', related='partner_id.property_stock_supplier')
    property_stock_customer = fields.Many2one('stock.location', related='partner_id.property_stock_customer')
    property_purchase_currency_id = fields.Many2one('res.currency', related='partner_id.property_purchase_currency_id')
    property_product_pricelist = fields.Many2one('product.pricelist', related='partner_id.property_product_pricelist')
    property_payment_term_id = fields.Many2one('account.payment.term', related='partner_id.property_payment_term_id')
    property_account_receivable_id = fields.Many2one('account.account', related='partner_id.property_account_receivable_id')
    property_account_position_id = fields.Many2one('account.fiscal.position', related='partner_id.property_account_position_id')
    property_account_payable_id = fields.Many2one('account.account', related='partner_id.property_account_payable_id')
    picking_warn_msg = fields.Text(related='partner_id.picking_warn_msg')
    picking_warn = fields.Selection([('1','1')], related='partner_id.picking_warn')
    phone = fields.Char(related='partner_id.phone')
    payment_token_ids = fields.One2many('payment.token', related='partner_id.payment_token_ids')
    payment_token_count = fields.Integer(related='partner_id.payment_token_count')
    payment_next_action_date = fields.Date(related='partner_id.payment_next_action_date')
    payment_next_action = fields.Text(related='partner_id.payment_next_action')
    partner_share = fields.Boolean(related='partner_id.partner_share')
    parent_name = fields.Char(related='partner_id.parent_name')
    parent_id = fields.Many2one('res.partner', related='partner_id.parent_id')
    opt_out = fields.Boolean(related='partner_id.opt_out')
    notify_email = fields.Selection([('1','1')], related='partner_id.notify_email')
    name = fields.Char(related='partner_id.name')
    mobile = fields.Char(related='partner_id.mobile')
    message_unread_counter = fields.Integer(related='partner_id.message_unread_counter')
    message_unread = fields.Boolean(related='partner_id.message_unread')
    message_partner_ids = fields.Many2many('res.partner', related='partner_id.message_partner_ids')
    message_needaction_counter = fields.Integer(related='partner_id.message_needaction_counter')
    message_needaction = fields.Boolean(related='partner_id.message_needaction')
    message_last_post = fields.Datetime(related='partner_id.message_last_post')
    message_is_follower = fields.Boolean(related='partner_id.message_is_follower')
    message_bounce = fields.Integer(related='partner_id.message_bounce')
    last_time_entries_checked = fields.Datetime(related='partner_id.last_time_entries_checked')
    lang = fields.Selection([('1','1')], related='partner_id.lang')
    journal_item_count = fields.Integer(related='partner_id.journal_item_count')
    issued_total = fields.Monetary(related='partner_id.issued_total')
    is_pharmacy = fields.Boolean(related='partner_id.is_pharmacy')
    is_person = fields.Boolean(related='partner_id.is_person')
    is_patient = fields.Boolean(related='partner_id.is_patient')
    is_insurance_company = fields.Boolean(related='partner_id.is_insurance_company')
    is_institution = fields.Boolean(related='partner_id.is_institution')
    is_doctor = fields.Boolean(related='partner_id.is_doctor')
    is_company = fields.Boolean(related='partner_id.is_company')
    invoice_warn_msg = fields.Text(related='partner_id.invoice_warn_msg')
    invoice_warn = fields.Selection([('1','1')], related='partner_id.invoice_warn')
    invoice_ids = fields.One2many('account.invoice', related='partner_id.invoice_ids')
    image_small = fields.Binary(related='partner_id.image_small')
    image_medium = fields.Binary(related='partner_id.image_medium')
    image = fields.Binary(related='partner_id.image')
    im_status = fields.Char(related='partner_id.im_status')
    identify_card = fields.Char(related='partner_id.identify_card')
    has_unreconciled_entries = fields.Boolean(related='partner_id.has_unreconciled_entries')
    function = fields.Char(related='partner_id.function')
    fax = fields.Char(related='partner_id.fax')
    estbday = fields.Date(related='partner_id.estbday')
    employee = fields.Boolean(related='partner_id.employee')
    email_formatted = fields.Char(related='partner_id.email_formatted')
    email = fields.Char(related='partner_id.email')
    debit_limit = fields.Monetary(related='partner_id.debit_limit')
    debit = fields.Monetary(related='partner_id.debit')
    date = fields.Date(related='partner_id.date')
    customer_code = fields.Char(related='partner_id.customer_code')
    customer = fields.Boolean(related='partner_id.customer')
    currency_id = fields.Many2one('res.currency', related='partner_id.currency_id')
    credit_limit = fields.Float(related='partner_id.credit_limit')
    credit = fields.Monetary(related='partner_id.credit')
    country_id = fields.Many2one('res.country', related='partner_id.country_id')
    contracts_count = fields.Integer(related='partner_id.contracts_count')
    contract_ids = fields.One2many('account.analytic.account', related='partner_id.contract_ids')
    contact_address = fields.Char(related='partner_id.contact_address')
    company_type = fields.Selection([('1','1')], related='partner_id.company_type')
    company_name = fields.Char(related='partner_id.company_name')
    company_id = fields.Many2one('res.company', related='partner_id.company_id')
    commercial_partner_id = fields.Many2one('res.partner', related='partner_id.commercial_partner_id')
    commercial_company_name = fields.Char(related='partner_id.commercial_company_name')
    comment = fields.Text(related='partner_id.comment')
    color = fields.Integer(related='partner_id.color')
    city = fields.Char(related='partner_id.city')
    child_ids = fields.One2many('res.partner', related='partner_id.child_ids')
    channel_ids = fields.Many2many('mail.channel', related='partner_id.channel_ids')
    category_id = fields.Many2many('res.partner.category', related='partner_id.category_id')
    birthday = fields.Date(related='partner_id.birthday')
    barcode = fields.Char(related='partner_id.barcode')
    bank_ids = fields.One2many('res.partner.bank', related='partner_id.bank_ids')
    bank_account_count = fields.Integer(related='partner_id.bank_account_count')
    active = fields.Boolean(related='partner_id.active')

class MedicalPatientAmbulatory(models.Model):
    _name = 'medical.patient.ambulatory'
    name = fields.Char()
    evaluation_start_date = fields.Datetime()
    evaluation_end_date = fields.Datetime()
    temperature = fields.Float()
    glycemia = fields.Integer()
    bpm = fields.Integer()
    systolic = fields.Integer()
    osat = fields.Integer()
    respiratory_rate = fields.Integer()
    diastolic = fields.Integer()
    ordering_doctor = fields.Many2one('medical.physician')
    doctor = fields.Many2one('medical.physician')
    evaluation_id = fields.Many2one('medical.evaluation')
    base_condition = fields.Many2one('medical.pathology')
    patient = fields.Many2one('medical.patient')
    procedures = fields.One2many('medical.patient.ambulatory.procedure', 'name')
    medicaments = fields.One2many('medical.patient.ambulatory.medicines', 'name')
    state = fields.Selection([('1','1')])
    evolution = fields.Selection([('1','1')])
    session_notes = fields.Text()

class MedicalPatientAmbulatoryMedicines(models.Model):
    _name = 'medical.patient.ambulatory.medicines'
    qty = fields.Integer()
    medicine = fields.Many2one('medical.medicines')
    name = fields.Many2one('medical.patient.ambulatory')
    notes = fields.Text()

class MedicalPatientAmbulatoryProcedure(models.Model):
    _name = 'medical.patient.ambulatory.procedure'
    name = fields.Many2one('medical.patient.ambulatory')
    procedures = fields.Many2one('medical.procedure')
    notes = fields.Text()

class MedicalPatientCallLog(models.Model):
    _name = 'medical.patient.call.log'
    patient_id = fields.Char()
    name = fields.Char()
    log_date = fields.Datetime()
    patient = fields.Many2one('medical.patient')
    person_in_charge = fields.Many2one('res.users')
    call_type = fields.Selection([('1','1')])
    call_log = fields.Text()

class MedicalPatientFamily(models.Model):
    _name = 'medical.patient.family'
    deceased = fields.Boolean()
    mobile = fields.Char()
    age = fields.Char()
    name = fields.Char()
    patient_id = fields.Many2one('medical.patient')
    related_patient_id = fields.Many2one('medical.patient')
    relation = fields.Selection([('1','1')])

class MedicalPatientMedicalCert(models.Model):
    _name = 'medical.patient.medical.cert'
    name = fields.Char()
    end_date = fields.Date()
    issue_date = fields.Date()
    start_date = fields.Date()
    no_of_days = fields.Integer()
    institution = fields.Many2one('medical.health.center')
    patient = fields.Many2one('medical.patient')
    doctor = fields.Many2one('medical.physician')
    reason = fields.Text()

class MedicalPatientRounding(models.Model):
    _name = 'medical.patient.rounding'
    pain = fields.Boolean()
    pain_level = fields.Boolean()
    potty = fields.Boolean()
    personal_needs = fields.Boolean()
    position = fields.Boolean()
    depression = fields.Boolean()
    pump = fields.Boolean()
    proximity = fields.Boolean()
    warning = fields.Boolean()
    name = fields.Char()
    environmental_assessment = fields.Char()
    evaluation_start_date = fields.Datetime()
    evaluation_end_date = fields.Datetime()
    temperature = fields.Float()
    weight = fields.Integer()
    diastolic = fields.Integer()
    diuresis = fields.Integer()
    glycemia = fields.Integer()
    osat = fields.Integer()
    respiratory_rate = fields.Integer()
    systolic = fields.Integer()
    urinary_catheter = fields.Integer()
    bpm = fields.Integer()
    inpatient_id = fields.Many2one('medical.inpatient')
    doctor = fields.Many2one('medical.physician')
    patient = fields.Many2one('medical.patient')
    procedures = fields.One2many('medical.patient.rounding.procedure', 'name')
    medicaments = fields.One2many('medical.patient.rounding.medicines', 'name')
    evolution = fields.Selection([('1','1')])
    state = fields.Selection([('1','1')])
    round_summary = fields.Text()

class MedicalPatientRoundingMedicines(models.Model):
    _name = 'medical.patient.rounding.medicines'
    qty = fields.Integer()
    medicine = fields.Many2one('medical.medicines')
    name = fields.Many2one('medical.patient.rounding')
    notes = fields.Text()

class MedicalPatientRoundingProcedure(models.Model):
    _name = 'medical.patient.rounding.procedure'
    name = fields.Many2one('medical.patient.rounding')
    procedures = fields.Many2one('medical.procedure')
    notes = fields.Text()

class MedicalPediatricsGrowthChartWho(models.Model):
    _name = 'medical.pediatrics.growth.chart.who'
    type = fields.Char()
    value = fields.Float()
    month = fields.Integer()
    indicator = fields.Selection([('1','1')])
    measure = fields.Selection([('1','1')])
    sex = fields.Selection([('1','1')])

class MedicalPediatricsPsc(models.Model):
    _name = 'medical.pediatrics.psc'
    name = fields.Char()
    evaluation_start = fields.Datetime()
    psc_total = fields.Integer()
    doctor = fields.Many2one('medical.physician')
    patient = fields.Many2one('medical.patient')
    psc_acts_as_driven_by_motor = fields.Selection([('1','1')])
    psc_blames_others = fields.Selection([('1','1')])
    psc_daydreams_too_much = fields.Selection([('1','1')])
    psc_does_not_get_people_feelings = fields.Selection([('1','1')])
    psc_does_not_listen_to_rules = fields.Selection([('1','1')])
    psc_does_not_show_feelings = fields.Selection([('1','1')])
    psc_down_on_self = fields.Selection([('1','1')])
    psc_feels_hopeless = fields.Selection([('1','1')])
    psc_feels_is_bad_child = fields.Selection([('1','1')])
    psc_fights_with_others = fields.Selection([('1','1')])
    psc_gets_hurt_often = fields.Selection([('1','1')])
    psc_having_less_fun = fields.Selection([('1','1')])
    psc_irritable_angry = fields.Selection([('1','1')])
    psc_school_grades_dropping = fields.Selection([('1','1')])
    psc_visit_doctor_finds_ok = fields.Selection([('1','1')])
    psc_less_interested_in_friends = fields.Selection([('1','1')])
    psc_less_interest_in_school = fields.Selection([('1','1')])
    psc_refuses_to_share = fields.Selection([('1','1')])
    psc_sad_unhappy = fields.Selection([('1','1')])
    psc_spend_time_alone = fields.Selection([('1','1')])
    psc_takes_things_from_others = fields.Selection([('1','1')])
    psc_takes_unnecesary_risks = fields.Selection([('1','1')])
    psc_teases_others = fields.Selection([('1','1')])
    psc_tires_easily = fields.Selection([('1','1')])
    psc_trouble_sleeping = fields.Selection([('1','1')])
    psc_trouble_with_teacher = fields.Selection([('1','1')])
    psc_wants_to_be_with_parents = fields.Selection([('1','1')])
    psc_worries_a_lot = fields.Selection([('1','1')])
    psc_act_as_younger = fields.Selection([('1','1')])
    psc_distracted_easily = fields.Selection([('1','1')])
    psc_trouble_concentrating = fields.Selection([('1','1')])
    psc_afraid_of_new_situations = fields.Selection([('1','1')])
    psc_fidgety = fields.Selection([('1','1')])
    psc_absent_from_school = fields.Selection([('1','1')])
    psc_aches_pains = fields.Selection([('1','1')])
    notes = fields.Text()

class MedicalPerinatalMonitor(models.Model):
    _name = 'medical.perinatal.monitor'
    bleeding = fields.Boolean()
    meconium = fields.Boolean()
    name = fields.Char()
    date = fields.Datetime()
    f_frequency = fields.Integer()
    frequency = fields.Integer()
    fundal_height = fields.Integer()
    systolic = fields.Integer()
    contractions = fields.Integer()
    diastolic = fields.Integer()
    dilation = fields.Integer()
    gyneco_id = fields.Many2one('medical.gyneco')
    fetus_position = fields.Selection([('1','1')])

class MedicalPharmacyPharmacist(models.Model):
    _name = 'medical.pharmacy.pharmacist'
    institution = fields.Many2one('medical.health.center')
    pharmacist_id = fields.Many2one('medical.physician')
    pharmacy_id = fields.Many2one('medical.health.center.pharmacy')

class MedicalPhysician(models.Model):
    _name = 'medical.physician'
    is_receptionist = fields.Boolean()
    is_pharmacist = fields.Boolean()
    is_nurse = fields.Boolean()
    code = fields.Char()
    walkin_count = fields.Integer()
    prescription_count = fields.Integer()
    receiving_count = fields.Integer()
    consultancy_price = fields.Integer()
    app_count = fields.Integer()
    room_id = fields.Many2many('medical.health.center.ot', relation='medical_physician_room_rel')
    degree_id = fields.Many2many('medical.degrees', relation='medical_degrees_medical_physician_rel')
    oeh_user_id = fields.Many2one('res.users')
    building = fields.Many2one('medical.health.center.building')
    address_id = fields.Many2one('res.partner')
    speciality = fields.Many2one('medical.speciality')
    health_center = fields.Many2one('medical.health.center')
    department = fields.Many2one('medical.health.center.ward')
    institution = fields.Many2one('medical.health.center')
    employee_id = fields.Many2one('hr.employee')
    available_lines = fields.One2many('medical.physician.line', 'physician_id')
    walkin_schedule_lines = fields.One2many('medical.physician.walkin.schedule', 'physician_id')
    consultancy_type = fields.Selection([('1','1')])
    work_phone = fields.Char(related='employee_id.work_phone')
    work_location = fields.Char(related='employee_id.work_location')
    work_email = fields.Char(related='employee_id.work_email')
    user_id = fields.Many2one('res.users', related='employee_id.user_id')
    time_efficiency = fields.Float(related='employee_id.time_efficiency')
    ssnid = fields.Char(related='employee_id.ssnid')
    sinid = fields.Char(related='employee_id.sinid')
    resource_type = fields.Selection([('1','1')], related='employee_id.resource_type')
    resource_id = fields.Many2one('resource.resource', related='employee_id.resource_id')
    passport_id = fields.Char(related='employee_id.passport_id')
    parent_id = fields.Many2one('hr.employee', related='employee_id.parent_id')
    notes = fields.Text(related='employee_id.notes')
    name_related = fields.Char(related='employee_id.name_related')
    name = fields.Char(related='employee_id.name')
    mobile_phone = fields.Char(related='employee_id.mobile_phone')
    message_unread_counter = fields.Integer(related='employee_id.message_unread_counter')
    message_unread = fields.Boolean(related='employee_id.message_unread')
    message_partner_ids = fields.Many2many('res.partner', related='employee_id.message_partner_ids')
    message_needaction_counter = fields.Integer(related='employee_id.message_needaction_counter')
    message_needaction = fields.Boolean(related='employee_id.message_needaction')
    message_last_post = fields.Datetime(related='employee_id.message_last_post')
    message_is_follower = fields.Boolean(related='employee_id.message_is_follower')
    marital = fields.Selection([('1','1')], related='employee_id.marital')
    login = fields.Char(related='employee_id.login')
    last_login = fields.Datetime(related='employee_id.last_login')
    job_id = fields.Many2one('hr.job', related='employee_id.job_id')
    image_small = fields.Binary(related='employee_id.image_small')
    image_medium = fields.Binary(related='employee_id.image_medium')
    image = fields.Binary(related='employee_id.image')
    identification_id = fields.Char(related='employee_id.identification_id')
    gender = fields.Selection([('1','1')], related='employee_id.gender')
    department_id = fields.Many2one('hr.department', related='employee_id.department_id')
    country_id = fields.Many2one('res.country', related='employee_id.country_id')
    company_id = fields.Many2one('res.company', related='employee_id.company_id')
    color = fields.Integer(related='employee_id.color')
    coach_id = fields.Many2one('hr.employee', related='employee_id.coach_id')
    city = fields.Char(related='employee_id.city')
    child_ids = fields.One2many('hr.employee', related='employee_id.child_ids')
    category_ids = fields.Many2many('hr.employee.category', related='employee_id.category_ids')
    calendar_id = fields.Many2one('resource.calendar', related='employee_id.calendar_id')
    birthday = fields.Date(related='employee_id.birthday')
    bank_account_id = fields.Many2one('res.partner.bank', related='employee_id.bank_account_id')
    address_home_id = fields.Many2one('res.partner', related='employee_id.address_home_id')
    active = fields.Boolean(related='employee_id.active')

class MedicalPhysicianLine(models.Model):
    _name = 'medical.physician.line'
    end_time = fields.Float()
    start_time = fields.Float()
    physician_id = fields.Many2one('medical.physician')
    name = fields.Selection([('1','1')])

class MedicalPhysicianWalkinSchedule(models.Model):
    _name = 'medical.physician.walkin.schedule'
    end_date = fields.Date()
    name = fields.Date()
    physician_id = fields.Many2one('medical.physician')

class MedicalPhysiciansPrescription(models.Model):
    _name = 'medical.physicians.prescription'
    name = fields.Char()
    date = fields.Datetime()
    pres_count = fields.Integer()
    patient = fields.Many2one('medical.patient')
    walkin = fields.Many2one('medical.appointment.register.walkin')
    department = fields.Many2one('medical.health.center.ward')
    doctor = fields.Many2one('medical.physician')
    receiving_id = fields.Many2one('medical.receiving.patient')
    pharmacy = fields.Many2one('medical.health.center.pharmacy')
    prescription_line = fields.One2many('medical.physicians.prescription.line', 'prescription_id')
    state = fields.Selection([('1','1')])
    info = fields.Text()
    notes = fields.Text()

class MedicalPhysiciansPrescriptionLine(models.Model):
    _name = 'medical.physicians.prescription.line'
    admin_times = fields.Char()
    start_treatment = fields.Datetime()
    end_treatment = fields.Datetime()
    qty_x = fields.Integer()
    frequency = fields.Integer()
    qty = fields.Integer()
    dose = fields.Integer()
    duration = fields.Integer()
    dose_route = fields.Many2one('medical.drug.route')
    dose_form = fields.Many2one('medical.drug.form')
    dose_unit = fields.Many2one('medical.dose.unit')
    indication = fields.Many2one('medical.pathology')
    patient = fields.Many2one('medical.patient')
    prescription_id = fields.Many2one('medical.physicians.prescription')
    common_dosage = fields.Many2one('medical.dosage')
    name = fields.Many2one('medical.medicines')
    duration_period = fields.Selection([('1','1')])
    frequency_unit = fields.Selection([('1','1')])
    info = fields.Text()

class MedicalPrescription(models.Model):
    _name = 'medical.prescription'
    name = fields.Char()
    date = fields.Datetime()
    invoice_count = fields.Integer()
    pharmacist_ids = fields.Many2many('medical.physician', relation='medical_prescription_physician_rel')
    pharmacist = fields.Many2one('medical.physician')
    pharmacy = fields.Many2one('medical.health.center.pharmacy')
    walkin = fields.Many2one('medical.appointment.register.walkin')
    department = fields.Many2one('medical.health.center.ward')
    doctor = fields.Many2one('medical.physician')
    patient = fields.Many2one('medical.patient')
    source_id = fields.Many2one('medical.physicians.prescription')
    prescription_id = fields.Many2one('medical.physicians.prescription')
    prescription_line = fields.One2many('medical.prescription.line', 'prescription_id')
    state = fields.Selection([('1','1')])
    info = fields.Text()

class MedicalPrescriptionLine(models.Model):
    _name = 'medical.prescription.line'
    admin_times = fields.Char()
    start_treatment = fields.Datetime()
    end_treatment = fields.Datetime()
    qty = fields.Integer()
    qty_x = fields.Integer()
    dose = fields.Integer()
    duration = fields.Integer()
    frequency = fields.Integer()
    dose_form = fields.Many2one('medical.drug.form')
    prescription_id = fields.Many2one('medical.prescription')
    dose_unit = fields.Many2one('medical.dose.unit')
    indication = fields.Many2one('medical.pathology')
    common_dosage = fields.Many2one('medical.dosage')
    name = fields.Many2one('medical.medicines')
    dose_route = fields.Many2one('medical.drug.route')
    patient = fields.Many2one('medical.patient')
    state = fields.Selection([('1','1')])
    duration_period = fields.Selection([('1','1')])
    frequency_unit = fields.Selection([('1','1')])
    info = fields.Text()

class MedicalPrescriptionReport(models.Model):
    _name = 'medical.prescription.report'
    name = fields.Char()
    date = fields.Date()
    count_total = fields.Float()
    doctor = fields.Many2one('medical.physician')
    department = fields.Many2one('medical.health.center.ward')
    patient = fields.Many2one('medical.patient')
    pharmacy = fields.Many2one('medical.health.center.pharmacy')
    state = fields.Selection([('1','1')])

class MedicalProcedure(models.Model):
    _name = 'medical.procedure'
    description = fields.Char()
    name = fields.Char()

class MedicalPuerperiumMonitor(models.Model):
    _name = 'medical.puerperium.monitor'
    name = fields.Char()
    date = fields.Datetime()
    temperature = fields.Float()
    uterus_involution = fields.Integer()
    diastolic = fields.Integer()
    frequency = fields.Integer()
    systolic = fields.Integer()
    gyneco_id = fields.Many2one('medical.gyneco')
    lochia_color = fields.Selection([('1','1')])
    lochia_amount = fields.Selection([('1','1')])
    lochia_odor = fields.Selection([('1','1')])

class MedicalReceivingPatient(models.Model):
    _name = 'medical.receiving.patient'
    laxative_chk = fields.Boolean()
    bleeding_pv_chk = fields.Boolean()
    nsaids_chk = fields.Boolean()
    aspirin_chk = fields.Boolean()
    dysmenorrhoea_chk = fields.Boolean()
    menorrhagia_chk = fields.Boolean()
    hbv_infection_chk = fields.Boolean()
    hypertension_chk = fields.Boolean()
    lmp_chk = fields.Boolean()
    ihd_chk = fields.Boolean()
    last_pap_smear_chk = fields.Boolean()
    is_walkin = fields.Boolean()
    cold_chk = fields.Boolean()
    surgery_chk = fields.Boolean()
    dm_chk = fields.Boolean()
    name = fields.Char()
    reason_check = fields.Char()
    date_re_exam = fields.Date()
    lmp_dt = fields.Date()
    dob = fields.Date()
    date = fields.Datetime()
    diagnosis_ids = fields.Many2many('medical.pathology', relation='medical_receiving_patient_pathology_rel')
    symptom_ids = fields.Many2many('medical.symptoms', relation='medical_receiving_patient_symptoms')
    symptoms_ids = fields.Many2many('medical.symptoms', relation='medical_receiving_patient_symptoms_rel')
    wards_id = fields.Many2one('medical.health.center.ward')
    doctor = fields.Many2one('medical.physician')
    institution = fields.Many2one('medical.health.center')
    insurance_id = fields.Many2one('medical.insurance')
    patient = fields.Many2one('medical.patient')
    room_id = fields.Many2one('medical.health.center.ot')
    stage_id = fields.Many2one('medical.registration.type')
    prescription_ids = fields.One2many('medical.physicians.prescription', 'receiving_id')
    vaccine_ids = fields.One2many('medical.vaccines', 'receiving_id')
    lab_test_ids = fields.One2many('medical.lab.test', 'receiving_id')
    imaing_ids = fields.One2many('medical.imaging', 'receiving_id')
    evaluation_ids = fields.One2many('medical.evaluation', 'receiving_id')
    sex = fields.Selection([('1','1')])
    state = fields.Selection([('1','1')])
    marital_status = fields.Selection([('1','1')])
    blood_type = fields.Selection([('1','1')])
    rh = fields.Selection([('1','1')])
    comments = fields.Text()
    aspirin_remarks = fields.Text()
    cold_remarks = fields.Text()
    surgery_remarks = fields.Text()
    others_past_illness = fields.Text()
    symptoms = fields.Text()
    ihd_remarks = fields.Text()
    last_pap_smear_remarks = fields.Text()
    laxative_remarks = fields.Text()
    hypertension_remarks = fields.Text()
    hbv_infection_remarks = fields.Text()
    dysmenorrhoea_remarks = fields.Text()
    menorrhagia_remarks = fields.Text()
    dm_remarks = fields.Text()
    nsaids_remarks = fields.Text()
    others_drugs = fields.Text()
    bleeding_pv_remarks = fields.Text()

class MedicalReceivingPatientReport(models.Model):
    _name = 'medical.receiving.patient.report'
    name = fields.Char()
    date = fields.Date()
    count_total = fields.Float()
    wards_id = fields.Many2one('medical.health.center.ward')
    doctor = fields.Many2one('medical.physician')
    patient = fields.Many2one('medical.patient')
    blood_type = fields.Selection([('1','1')])
    sex = fields.Selection([('1','1')])
    state = fields.Selection([('1','1')])
    marital_status = fields.Selection([('1','1')])

class MedicalRecreationalDrugs(models.Model):
    _name = 'medical.recreational.drugs'
    dea_schedule_i = fields.Boolean()
    route_inhaling = fields.Boolean()
    route_injection = fields.Boolean()
    route_oral = fields.Boolean()
    dea_schedule_ii = fields.Boolean()
    dea_schedule_iii = fields.Boolean()
    dea_schedule_iv = fields.Boolean()
    dea_schedule_v = fields.Boolean()
    route_popping = fields.Boolean()
    route_sniffing = fields.Boolean()
    street_name = fields.Char()
    name = fields.Char()
    withdrawal_level = fields.Integer()
    dependence_level = fields.Integer()
    intoxication_level = fields.Integer()
    reinforcement_level = fields.Integer()
    tolerance_level = fields.Integer()
    category = fields.Selection([('1','1')])
    addiction_level = fields.Selection([('1','1')])
    toxicity = fields.Selection([('1','1')])
    legal_status = fields.Selection([('1','1')])
    info = fields.Text()

class MedicalRegisterWalkinsReport(models.Model):
    _name = 'medical.register.walkins.report'
    name = fields.Char()
    date = fields.Date()
    count_total = fields.Float()
    wards_id = fields.Many2one('medical.health.center.ward')
    doctor = fields.Many2one('medical.physician')
    patient = fields.Many2one('medical.patient')
    blood_type = fields.Selection([('1','1')])
    sex = fields.Selection([('1','1')])
    state = fields.Selection([('1','1')])
    marital_status = fields.Selection([('1','1')])

class MedicalRegistrationType(models.Model):
    _name = 'medical.registration.type'
    readonly = fields.Boolean()
    name = fields.Char()
    sequence = fields.Integer()
    project_ids = fields.Many2many('medical.appointment.register.walkin', relation='medical_appointment_register_rel')
    description = fields.Text()

class MedicalSpeciality(models.Model):
    _name = 'medical.speciality'
    code = fields.Char()
    name = fields.Char()

class MedicalSurgery(models.Model):
    _name = 'medical.surgery'
    preop_site_marking = fields.Boolean()
    preop_oximeter = fields.Boolean()
    preop_sterility = fields.Boolean()
    preop_antibiotics = fields.Boolean()
    preop_bleeding_risk = fields.Boolean()
    computed_age = fields.Char()
    name = fields.Char()
    surgery_date = fields.Datetime()
    surgery_end_date = fields.Datetime()
    surgery_length = fields.Float()
    procedures = fields.Many2many('medical.procedure', relation='medical_surgery_procedure_rel')
    pathology = fields.Many2one('medical.pathology')
    surgeon = fields.Many2one('medical.physician')
    anesthetist = fields.Many2one('medical.physician')
    institution = fields.Many2one('medical.health.center')
    operating_room = fields.Many2one('medical.health.center.ot')
    signed_by = fields.Many2one('res.users')
    patient = fields.Many2one('medical.patient')
    postoperative_dx = fields.Many2one('medical.pathology')
    building = fields.Many2one('medical.health.center.building')
    admission = fields.Many2one('medical.appointment')
    preop_rcri = fields.Many2one('medical.surgery.rcri')
    surgery_team = fields.One2many('medical.surgery.team', 'name')
    supplies = fields.One2many('medical.surgery.supply', 'name')
    surgical_wound = fields.Selection([('1','1')])
    classification = fields.Selection([('1','1')])
    gender = fields.Selection([('1','1')])
    preop_asa = fields.Selection([('1','1')])
    preop_mallampati = fields.Selection([('1','1')])
    state = fields.Selection([('1','1')])
    info = fields.Text()
    description = fields.Text()
    anesthesia_report = fields.Text()

class MedicalSurgeryRcri(models.Model):
    _name = 'medical.surgery.rcri'
    rcri_diabetes_history = fields.Boolean()
    rcri_ischemic_history = fields.Boolean()
    rcri_congestive_history = fields.Boolean()
    rcri_kidney_history = fields.Boolean()
    rcri_cerebrovascular_history = fields.Boolean()
    rcri_high_risk_surgery = fields.Boolean()
    name = fields.Char()
    rcri_date = fields.Datetime()
    rcri_total = fields.Integer()
    patient = fields.Many2one('medical.patient')
    doctor = fields.Many2one('medical.physician')
    rcri_class = fields.Selection([('1','1')])

class MedicalSurgerySupply(models.Model):
    _name = 'medical.surgery.supply'
    notes = fields.Char()
    qty = fields.Integer()
    qty_used = fields.Integer()
    name = fields.Many2one('medical.surgery')
    supply = fields.Many2one('product.product')

class MedicalSurgeryTeam(models.Model):
    _name = 'medical.surgery.team'
    notes = fields.Char()
    role = fields.Many2one('medical.speciality')
    name = fields.Many2one('medical.surgery')
    team_member = fields.Many2one('medical.physician')

class MedicalSymptoms(models.Model):
    _name = 'medical.symptoms'
    name = fields.Char()
    extra_info = fields.Text()

class MedicalVaccines(models.Model):
    _name = 'medical.vaccines'
    date = fields.Datetime()
    dose = fields.Integer()
    institution = fields.Many2one('medical.health.center')
    name = fields.Many2one('medical.medicines')
    receiving_id = fields.Many2one('medical.receiving.patient')
    patient = fields.Many2one('medical.patient')
    walkin = fields.Many2one('medical.appointment.register.walkin')
    doctor = fields.Many2one('medical.physician')
    info = fields.Text()

class RevenueReportDetailIcsc(models.Model):
    _name = 'revenue.report.detail.icsc'
    source = fields.Char()
    number_invoice = fields.Char()
    paid_date = fields.Date()
    invoice_date = fields.Date()
    amount = fields.Float()
    no = fields.Integer()
    patient = fields.Many2one('medical.patient')
    report_id = fields.Many2one('revenue.report.icsc')

class RevenueReportIcsc(models.Model):
    _name = 'revenue.report.icsc'
    name = fields.Char()
    date = fields.Date()
    date_to = fields.Date()
    date_from = fields.Date()
    user_id = fields.Many2one('res.users')
    department = fields.Many2one('medical.health.center.ward')
    institution = fields.Many2one('medical.health.center')
    room_id = fields.Many2one('medical.health.center.ot')
    detail_ids = fields.One2many('revenue.report.detail.icsc', 'report_id')
    type = fields.Selection([('1','1')])

